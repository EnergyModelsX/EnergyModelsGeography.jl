var documenterSearchIndex = {"docs":
[{"location":"library/public/emi_extension/#lib-pub-emi_ext","page":"EMI extension","title":"EnergymodelsInvestments extensions","text":"","category":"section"},{"location":"library/public/emi_extension/","page":"EMI extension","title":"EMI extension","text":"EnergyModelsGeography requires significantly less direct interaction with EnergyModelsInvestments compared to EnergyModelsBase. In practice, we only provide a legacy constructor. All other functionality is handled within the internal functions.","category":"page"},{"location":"library/public/emi_extension/#lib-pub-emi_ext-inv_data","page":"EMI extension","title":"Investment data","text":"","category":"section"},{"location":"library/public/emi_extension/#lib-pub-emi_ext-inv_data-types","page":"EMI extension","title":"InvestmentData types","text":"","category":"section"},{"location":"library/public/emi_extension/","page":"EMI extension","title":"EMI extension","text":"Transmission mode investments utilize the same investment data type (SingleInvData) as investments in node capacities.","category":"page"},{"location":"library/public/emi_extension/#lib-pub-emi_ext-inv_data-leg","page":"EMI extension","title":"Legacy constructors","text":"","category":"section"},{"location":"library/public/emi_extension/","page":"EMI extension","title":"EMI extension","text":"We provide a legacy constructor, TransInvData, that uses the same input as in version 0.5.x. If you want to adjust your model to the latest changes, please refer to the section Update your model to the latest version of EnergyModelsInvestments.","category":"page"},{"location":"library/public/emi_extension/","page":"EMI extension","title":"EMI extension","text":"TransInvData","category":"page"},{"location":"library/public/emi_extension/#EnergyModelsGeography.TransInvData","page":"EMI extension","title":"EnergyModelsGeography.TransInvData","text":"TransInvData(;\n    capex_trans::TimeProfile,\n    trans_max_inst::TimeProfile,\n    trans_max_add::TimeProfile,\n    trans_min_add::TimeProfile,\n    inv_mode::Investment = ContinuousInvestment(),\n    trans_start::Union{Real, Nothing} = nothing,\n    trans_increment::TimeProfile = FixedProfile(0),\n    capex_trans_offset::TimeProfile = FixedProfile(0),\n)\n\nLegacy constructor for a TransInvData.\n\nThe new storage descriptions allows now for a reduction in functions which is used to make EnergModelsInvestments less dependent on EnergyModelsBase.\n\nThe core changes to the existing structure is the move of the required parameters to the type Investment (e.g., the minimum and maximum added capacity is only required for investment mdodes that require these parameters) as well as moving the lifetime to the type [LifetimeMode], when required.\n\nSee the documentation for further information regarding how you can translate your existing model to the new model.\n\n\n\n\n\nTransInvData(;\n    capex_trans::TimeProfile,\n    trans_max_inst::TimeProfile,\n    trans_max_add::TimeProfile,\n    trans_min_add::TimeProfile,\n    inv_mode::Investment = ContinuousInvestment(),\n    trans_start::Union{Real, Nothing} = nothing,\n    trans_increment::TimeProfile = FixedProfile(0),\n    capex_trans_offset::TimeProfile = FixedProfile(0),\n)\n\nLegacy constructor for a InvData.\n\nThe new storage descriptions allows now for a reduction in functions which is used to make EnergModelsInvestments less dependent on EnergyModelsBase.\n\nThe core changes to the existing structure is the move of the required parameters to the type Investment (e.g., the minimum and maximum added capacity is only required for investment mdodes that require these parameters) as well as moving the lifetime to the type [LifetimeMode], when required.\n\nSee the documentation for further information regarding how you can translate your existing model to the new model.\n\n\n\n\n\n","category":"function"},{"location":"how-to/contribute/#how_to-con","page":"Contribute to EnergyModelsGeography","title":"Contribute to EnergyModelsGeography","text":"","category":"section"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsGeography","title":"Contribute to EnergyModelsGeography","text":"Contributing to EnergyModelsGeography can be achieved in several different ways.","category":"page"},{"location":"how-to/contribute/#how_to-con-ext","page":"Contribute to EnergyModelsGeography","title":"Create new extensions","text":"","category":"section"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsGeography","title":"Contribute to EnergyModelsGeography","text":"The main focus of EnergyModelsGeography is to provide EnergyModelsBase with geographical representation using the concepts of Areas, Transmission corridors, or TransmissionModes. Hence, a first approach to contributing to EnergyModelsGeography is to create a new package with, e.g., the introduction of new Area, Transmission, or TransmissionMode descriptions. These descriptions can, e.g., include constraints for an Area or provide the model with new mathematical formulations for energy transmissions.","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsGeography","title":"Contribute to EnergyModelsGeography","text":"note: Note\nWe are currently working on guidelines for the best approach for EnergyModelsGeography, similar to the section Extensions to the model in EnergyModelsBase. This section will provide you eventually with additional information regarding to how you can develop new Area, Transmission, or TransmissionMode descriptions.","category":"page"},{"location":"how-to/contribute/#how_to-con-bug_rep","page":"Contribute to EnergyModelsGeography","title":"File a bug report","text":"","category":"section"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsGeography","title":"Contribute to EnergyModelsGeography","text":"Another approach to contributing to EnergyModelsGeography is through filing a bug report as an issue when unexpected behaviour is occuring.","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsGeography","title":"Contribute to EnergyModelsGeography","text":"When filing a bug report, please follow the following guidelines:","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsGeography","title":"Contribute to EnergyModelsGeography","text":"Be certain that the bug is a bug and originating in EnergyModelsGeography:\nIf the problem is within the results of the optimization problem, please check first that the nodes are correctly linked with each other. Frequently, missing links (or wrongly defined links) restrict the transport of energy/mass. If you are certain that all links are set correctly, it is most likely a bug in EnergyModelsGeography and should be reported.\nIf you observe no transfer of mass between geographical regions, please check first that you use a GeoAvailability node as the description is different from a GenAvailability node. In addition, please check that the Transmission corridors and TransmissionModes are set correctly as well as there is a demand or suppy in both areas of the transported Resource.\nIf the problem occurs in model construction, it is most likely a bug in either EnergyModelsBase or EnergyModelsGeography and should be reported in the respective package. The error message of Julia should provide you with the failing function and whether the failing function is located in EnergyModelsBase or EnergyModelsGeography. It can occur, that the last shown failing function is within JuMP or MathOptInterface. In this case, it is best to trace the error to the last called EnergyModelsBase or EnergyModelsGeography function.\nIf the problem is only appearing for specific solvers, it is most likely not a bug in EnergyModelsGeography, but instead a problem of the solver wrapper for MathOptInterface. In this case, please contact the developers of the corresponding solver wrapper.\nLabel the issue as bug, and\nProvide a minimum working example of a case in which the bug occurs.","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsGeography","title":"Contribute to EnergyModelsGeography","text":"note: Note\nWe are aware that certain design choices within EnergyModelsGeography can lead to method ambiguities. Our aim is to extend the documentation to improve the description on how to best extend the base functionality as well as which caveats can occur.In order to improve the code, we welcome any reports of potential method ambiguities to help us improving the structure of the framework.","category":"page"},{"location":"how-to/contribute/#how_to-con-feat_req","page":"Contribute to EnergyModelsGeography","title":"Feature requests","text":"","category":"section"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsGeography","title":"Contribute to EnergyModelsGeography","text":"Although EnergyModelsGeography was designed with the aim of flexibility, it sometimes still requires additional features to account for potential extensions. Feature requests for EnergyModelsGeography should follow the guidelines developed for EnergyModelsBase.","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsGeography","title":"Contribute to EnergyModelsGeography","text":"note: Note\nEnergyModelsGeography should not include everything.The aim of the framework is to be lightweight and extensible by the user. Hence, feature requests should only include basic requirements for the core structure, and not, e.g., the description of new Areas description. These should be developed outside of EnergyModelsGeography.","category":"page"},{"location":"library/public/mode/#lib-pub-mode","page":"TransmissionMode","title":"TransmissionMode","text":"","category":"section"},{"location":"library/public/mode/","page":"TransmissionMode","title":"TransmissionMode","text":"TransmissionMode describes how resources are transported, for example by dynamic transmission modes on ship, truck or railway (represented generically by RefDynamic, although not implemented in the current version) or by static transmission modes on overhead power lines or gas pipelines (respresented generically by RefStatic). TransmissionModes includes capacity limits (trans_cap), losses (trans_loss) and directions (directions) for the generic transmission modes RefDynamic and RefStatic. More specialized TransmissionModes such as subtypes of the abstract type PipeMode can convert one inlet resource to another outlet resource. This approach can be used for representing a static pressure drop within a pipeline. The PipeMode can be consuming another resource such as electricity for compressors at a consumption_rate in order to transport natural gas or hydrogen. The consumption_rate is in this situation proportional to the transport of the inlet resource. All TransmissionModes can also include both fixed (opex_fixed) and variable (opex_var) operational expenditures (OPEX).","category":"page"},{"location":"library/public/mode/","page":"TransmissionMode","title":"TransmissionMode","text":"warning: Warning\nAll parameters of the implemented TransmissionModes are relative (based on usage, opex_var and trans_loss, or the installed capacity, opex_fixed). They are independent of the distance. The reasoning for this approach is that it allows the modeller to have a non-linear, distance dependent OPEX or loss function for providing the input to the model.","category":"page"},{"location":"library/public/mode/#lib-pub-mode-types","page":"TransmissionMode","title":"TransmissionMode types","text":"","category":"section"},{"location":"library/public/mode/","page":"TransmissionMode","title":"TransmissionMode","text":"The following TransmissionModes are implemented and exported:","category":"page"},{"location":"library/public/mode/","page":"TransmissionMode","title":"TransmissionMode","text":"TransmissionMode\nRefStatic\nRefDynamic\nPipeMode\nPipeSimple\nPipeLinepackSimple","category":"page"},{"location":"library/public/mode/#EnergyModelsGeography.TransmissionMode","page":"TransmissionMode","title":"EnergyModelsGeography.TransmissionMode","text":"abstract type TransmissionMode\n\nDeclaration of the general type for transmission modes transporting resources between areas.\n\n\n\n\n\n","category":"type"},{"location":"library/public/mode/#EnergyModelsGeography.RefStatic","page":"TransmissionMode","title":"EnergyModelsGeography.RefStatic","text":"struct RefStatic <: TransmissionMode\n\nA reference static TransmissionMode.\n\nGeneric representation of static transmission modes, such as overhead power lines or pipelines.\n\nFields\n\nid::String is the name/identifyer of the transmission mode.\nresource::Resource is the resource that is transported.\ntrans_cap::Real is the capacity of the transmission mode.\ntrans_loss::Real is the loss of the transported resource during transmission, modelled as a ratio.\nopex_var::TimeProfile is the variable operating expense per energy unit transported.\nopex_fixed::TimeProfile is the fixed operating expense per installed capacity.\ndirections is the number of directions the resource can be transported, 1 is unidirectional (A->B) or 2 is bidirectional (A<->B).\ndata::Vector{Data} is the additional data (e.g., for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/mode/#EnergyModelsGeography.RefDynamic","page":"TransmissionMode","title":"EnergyModelsGeography.RefDynamic","text":"struct RefDynamic <: TransmissionMode\n\nA reference dynamic TransmissionMode.\n\nGeneric representation of dynamic transmission modes, using for example truck, ship or railway transport.\n\nFields\n\nid::String is the name/identifyer of the transmission mode.\nresource::Resource is the resource that is transported.\ntrans_cap::TimeProfile is the capacity of the transmission mode.\ntrans_loss::TimeProfile is the loss of the transported resource during transmission, modelled as a ratio.\nopex_var::TimeProfile is the variable operating expense per energy unit transported.\nopex_fixed::TimeProfile is the fixed operating expense per installed capacity.\ndirections is the number of directions the resource can be transported, 1 is unidirectional (A->B) or 2 is bidirectional (A<->B).\ndata::Vector{Data} is the additional data (e.g., for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/mode/#EnergyModelsGeography.PipeMode","page":"TransmissionMode","title":"EnergyModelsGeography.PipeMode","text":"abstract type PipeMode <: TransmissionMode\n\nTransmissionMode mode for additional variable potential.\n\n\n\n\n\n","category":"type"},{"location":"library/public/mode/#EnergyModelsGeography.PipeSimple","page":"TransmissionMode","title":"EnergyModelsGeography.PipeSimple","text":"struct PipeSimple <: PipeMode\n\nThis TransmissionMode allows for altering the transported Resource.\n\nA usage of this could be, e.g., by defining a subtype struct of Resource with the field 'pressure'. This PipelineMode can then take SomeSubtype<:Resource with pressure p₁ at the inlet, and pressure p₂ at the outlet.\n\nThis type also supports consuming resources proportionally to the volume of transported Resource (at the inlet). This could be used for modeling the power needed for operating the pipeline.\n\nPipeline transport using PipeSimple is assumed to be unidirectional. It is not possible to use PipeSimple for bidirectional transport as the consuming resource would in this case be consumed at the wrong Area.\n\nFields\n\nid::String is the identifier used in printed output.\ninlet::Resource is the Resource going into transmission.\noutlet::Resource is the Resource going out of the outlet of the transmission.\nconsuming::Resource is the Resource the transmission consumes by operating.\nconsumption_rate::TimeProfile the rate of which the resource Pipeline.consuming is consumed, as a ratio of the volume of the resource going into the inlet, i.e.:\n  `consumption_rate` = consumed volume / inlet volume (per operational period)\ntrans_cap::Real is the capacity of the transmission mode.\ntrans_loss::Real is the loss of the transported resource during transmission, modelled as a ratio.\nopex_var::TimeProfile is the variable operating expense per energy unit transported.\nopex_fixed::TimeProfile is the fixed operating expense per installed capacity.\ndata::Vector{Data} is the additional data (e.g., for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/mode/#EnergyModelsGeography.PipeLinepackSimple","page":"TransmissionMode","title":"EnergyModelsGeography.PipeLinepackSimple","text":"struct PipeLinepackSimple <: PipeMode\n\nPipeline model with linepacking implemented as simple storage function.\n\nFields\n\nid::String is the identifier used in printed output.\ninlet::Resource is the Resource going into transmission.\noutlet::Resource is the Resource going out of the outlet of the transmission.\nconsuming::Resource is the Resource the transmission consumes by operating.\nconsumption_rate::TimeProfile the rate of which the resource Pipeline.consuming is consumed, as a ratio of the volume of the resource going into the inlet, i.e.:\n  `consumption_rate` = consumed volume / inlet volume (per operational period)\ntrans_cap::Real is the capacity of the transmission mode.\ntrans_loss::Real is the loss of the transported resource during transmission, modelled as a ratio.\nopex_var::TimeProfile is the variable operating expense per energy unit transported.\nopex_fixed::TimeProfile is the fixed operating expense per installed capacity.\nenergy_share::Float64 is the storage energy capacity relative to pipeline capacity.\ndata::Array{<:Data} is the additional data (e.g., for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/mode/#lib-pub-mode-fun_fields","page":"TransmissionMode","title":"Functions for accessing fields of TransmissionMode types","text":"","category":"section"},{"location":"library/public/mode/","page":"TransmissionMode","title":"TransmissionMode","text":"The following functions are defined and exported for accessing fields from a TransmissionMode:","category":"page"},{"location":"library/public/mode/","page":"TransmissionMode","title":"TransmissionMode","text":"map_trans_resource\nloss\ndirections\nmode_data\nconsumption_rate\nenergy_share","category":"page"},{"location":"library/public/mode/#EnergyModelsGeography.map_trans_resource","page":"TransmissionMode","title":"EnergyModelsGeography.map_trans_resource","text":"map_trans_resource(tm::TransmissionMode)\nmap_trans_resource(tm::PipeMode)\n\nReturns the transported resource for a given TransmissionMode.\n\n\n\n\n\n","category":"function"},{"location":"library/public/mode/#EnergyModelsGeography.loss","page":"TransmissionMode","title":"EnergyModelsGeography.loss","text":"loss(tm::TransmissionMode)\nloss(tm::TransmissionMode, t)\n\nReturns the loss of transmission mode tm as TimeProfile or in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/public/mode/#EnergyModelsGeography.directions","page":"TransmissionMode","title":"EnergyModelsGeography.directions","text":"directions(tm::TransmissionMode)\n\nReturns the directions of transmission mode tm.\n\n\n\n\n\n","category":"function"},{"location":"library/public/mode/#EnergyModelsGeography.mode_data","page":"TransmissionMode","title":"EnergyModelsGeography.mode_data","text":"mode_data(tm::TransmissionMode)\n\nReturns the Data array of transmission mode tm.\n\n\n\n\n\n","category":"function"},{"location":"library/public/mode/#EnergyModelsGeography.consumption_rate","page":"TransmissionMode","title":"EnergyModelsGeography.consumption_rate","text":"consumption_rate(tm::PipeMode)\nconsumption_rate(tm::PipeMode, t)\n\nReturns the consumption rate of pipe mode tm as TimeProfile or in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/public/mode/#EnergyModelsGeography.energy_share","page":"TransmissionMode","title":"EnergyModelsGeography.energy_share","text":"energy_share(tm::PipeLinepackSimple)\n\nReturns the energy share of PipeLinepackSimple tm.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimization-variables/#man-opt_var","page":"Optimization variables","title":"Optimization variables","text":"","category":"section"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"EnergyModelsGeography adds additional variables to EnergyModelsBase. These variables are required for being able to extend the model with geographic information. The additional variables can be differentiated between Area variables and TransmissionMode variables.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"note: Note\nAs it is the case in EnergyModelsBase, we define almost exclusively rate variables in EnergyModelsGeography. Variables that are energy/mass based have that property highlighted in the documentation below. This is only the case for the storage level in a PipeLinepackSimple.","category":"page"},{"location":"manual/optimization-variables/#man-opt_var-area","page":"Optimization variables","title":"Area","text":"","category":"section"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"Areas create only a single additional variable:","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"textttarea_exchangea t p_ex: Exchange of energy/mass from area a in operational period t for exchange resource p_textttex.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"The area exchange is defined for all areas for resources that area can exchange with other areas. This also includes also potential Transmission corridors in which the model can invest in. The exchange resources are automatically deduced from the coupled TransmissionModes. The area exchange is negative when exporting energy/mass and positive when importing. This implies that for textttarea_exchangea t p_textttex  0, the area imports product p_textttex, and for textttarea_exchangea t p_textttex  0, the area exports product p_textttex.","category":"page"},{"location":"manual/optimization-variables/#man-opt_var-transmission_mode","page":"Optimization variables","title":"TransmissionMode","text":"","category":"section"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"warning: 'Inheritance' of optimization variables\nNote that for all subtypes of TransmissionMode the variables created for the parent TransmissionMode-type will be created, in addition to the variables created for that type.This means that the type PipeLinepackSimple will not only have access to the optimization variable textttlinepack_stor_levelm t, but also all the optimization variables created for TransmissionMode.","category":"page"},{"location":"manual/optimization-variables/#man-opt_var-transmission_mode-gen","page":"Optimization variables","title":"General variables for all TransmissionMode","text":"","category":"section"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"All variables described in this section are included for all subtypes of TransmissionMode. In general, we can differentiate between capacity variables, flow variables, cost variables, and helper variables.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"texttttrans_capm t: Transmission capacity of transmission mode m in operational period t.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"is the single capacity variable that is considered in the case of TransmissionModes.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"texttttrans_inm t: Flow into the transmission mode m, given by the from field in the Transmission corridor in operational period t,\ntexttttrans_outm t: Flow out of transmission mode m, given by the to field in the Transmission corridor in operational period t, and\ntexttttrans_lossm t: Loss of transmission mode m in operational period t,","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"are the three flow variables. The loss is in practice not a flow variable, but can be considered as equivalent.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"TransmissionModes can also have operational costs. We differentiate between variables and fixed operational costs (OPEX) as it is the case in EnergyModelsBase:","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"texttttrans_opex_varm t_textttinv: Variable OPEX of transmission mode m in strategic period t_textttinv and\ntexttttrans_opex_fixedm t_textttinv: Fixed OPEX of transmission mode m in strategic period t_textttinv.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"The definitions of both fixed and variable operational cost are similar to the definitions for Nodes in EnergyModelsBase.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"Bidirectional flow requires the introduction of helper variables for proper calculation of both the loss and the variable OPEX. The following variables are hence created in addition, if bidirectional flow is allowed.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"texttttrans_posm t: Flow of transmission mode m in operational period t in the positive direction,\ntexttttrans_negm t: Flow of transmission mode m in operational period t in the negative direction.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"In addition, both texttttrans_inm t and texttttrans_outm t can in this situation be both positive or negative.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"note: Note\nThe direction of a Transmission corridor has an impact on whether the variables are positive or negative for export from a given Area as well as whether texttttrans_inm t or texttttrans_outm t corresponds to the inlet/outlet flow rate of a TransmissionMode.If the energy/mass is transported in the direction of the Transmission corridor, then both variables are positive and texttttrans_inm t corresponds to the inlet to the TransmissionMode.If the energy/mass is transported  opposite to the direction of the Transmission corridor, then both variables are negative and texttttrans_inm t corresponds to the outlet to the TransmissionMode.","category":"page"},{"location":"manual/optimization-variables/#man-opt_var-transmission_mode-linepack","page":"Optimization variables","title":"PipeLinepackSimple <: Pipeline <: TransmissionMode","text":"","category":"section"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"PipeLinepackSimple adds one additional variable:","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"textttlinepack_stor_levelm t: the storage level in the pipeline m in operational period t.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"Contrary to a Storage node, we do not add a storage capacity or rate for the simple implementation of linepacking. In fact, storing gases through line packing is a fundamental property of the pipeline, influenced by the pipeline diameter and the properties of the stored gas. Hence, it cannot be considered that the capacity and rate of storage are independent of each other.","category":"page"},{"location":"area_mode/corridor/#area_mode-trans_corr","page":"Transmission corridor","title":"Transmission corridors","text":"","category":"section"},{"location":"area_mode/corridor/","page":"Transmission corridor","title":"Transmission corridor","text":"The concept of transmission corridors is used to provide a common umbrella for individual transmission options between areas. They do not have any direct application within the mathematical description, but simplify the overall framework structure.","category":"page"},{"location":"area_mode/corridor/#area_mode-trans_corr-fields","page":"Transmission corridor","title":"Introduced type and its fields","text":"","category":"section"},{"location":"area_mode/corridor/","page":"Transmission corridor","title":"Transmission corridor","text":"EnergyModelsGeography introduces only a single concrete type. Hence, it is not possible to provide any additional subtype to change the behavior.","category":"page"},{"location":"area_mode/corridor/","page":"Transmission corridor","title":"Transmission corridor","text":"The fields of the type are given as:","category":"page"},{"location":"area_mode/corridor/","page":"Transmission corridor","title":"Transmission corridor","text":"from::Area and to::Area:\nThe field from denotes the area in which the corridor is originating while field to denotes the area to which resources are transported in the corridor. This is especially important for unidirectional transmission. It does not have a meaning in the case of bidirectional transmission.\nmodes::Vector{<:Transmission}:\nIt is in general possible to include an arbitray number of transmission modes within a single corridor. As an example, you could consider both AC and DC power flow between area 1 and area 2.","category":"page"},{"location":"area_mode/corridor/","page":"Transmission corridor","title":"Transmission corridor","text":"warning: Directional flow\nThe design of EnergyModelsGeography differentiates between bi and unidirectional flow. While bidirectional flow is the standard for power transmission, it is not necessarily possible to utilize it for pipeline transport. Hence, it is important to be certain about the from and to area with respect to the flow direction.","category":"page"},{"location":"area_mode/area/#area_mode-areas","page":"Areas","title":"Areas","text":"","category":"section"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"The concept of areas is introduced in EnergyModelsGeography to create energy systems with transmission between individual regions. As outlined in the philosophy section, each Area can have a different local energy system with different units, CAPEX calculation approaches, and demands.","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"This page explains the fields of areas more specifically and introduces the different variables.","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"Pages = [\n    \"area_mode/area.md\",\n    ]\nDepth = 2","category":"page"},{"location":"area_mode/area/#area_mode-areas-areas","page":"Areas","title":"Area","text":"","category":"section"},{"location":"area_mode/area/#area_mode-areas-areas-fields","page":"Areas","title":"Introduced types and their fields","text":"","category":"section"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"EnergyModelsGeography introduces two different areas, RefArea and LimitedExchangeArea. Both types include the following fields:","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"id:\nThe field id is only used to provide an identifier for the area. This identifier can be a shortened version of the area name.\nname:\nThe name of the area is used for printing an area to the Julia REPL, and hence, saving of variables. it can be only used as string input for the functions corr_from, corr_to, and corr_from_to.\nlon::Real:\nThe longitudinal position of the area is not directly used in EnergyModelsGeography. It is however possible for the user to provide additional functions which can utilize the longitude for distance calculations.\nlat::Real:\nThe latitudinal position of the area is not directly used in EnergyModelsGeography. It is however possible for the user to provide additional functions which can utilize the latitude for distance calculations.\nnode::Availability:\nThe field node correspond to the Availability node of the Area that is utilized for exchanging resources with other areas. !!! danger \"Nodal type: It must by a GeoAvailability (or comparable nodes in which the energy balance is not calculated in the create_node function) as otherwise no energy transmission between this area and other areas is possible.\nWe decided to not limit it directly to GeoAvailability to allow the user to introduce other types of Availability nodes with potentially additional variables and constraints. It is however important to not calculate the energy balance within the Availability node.","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"LimitedExchangeArea require an additional field:","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"limit::Dict{<:EMB.Resource, <:TimeProfile}:\nThe exchange limit is the maximum amount of a resource that can be exported to other areas in each operational period. It is still possible to import from other regions, but the overall net export can not exceed the provided value.","category":"page"},{"location":"area_mode/area/#area_mode-areas-areas-math","page":"Areas","title":"Mathematical description","text":"","category":"section"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"In the following mathematical equations, we use the name for variables and functions used in the model. Variables are in general represented as","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"textttvar_exampleindex_1 index_2","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"with square brackets, while functions are represented as","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"func_example(index_1 index_2)","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"with paranthesis.","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"In addition, we simplify the description as:","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"n = availability_node(a)\ncorresponds to the availability node n in the area a.\nP^ex = exchange_resources(L^trans a)\ncorrespond to the exchange resources P^ex of the area a, that is all resources that are either consumed in energy transmission or exchanged with connected areas.\nL^from L^to = trans_sub (L^trans a)\nare all transmission corridors that are either originating (superscript from) or ending (superscript to) in the area a.","category":"page"},{"location":"area_mode/area/#area_mode-areas-areas-math-var","page":"Areas","title":"Variables","text":"","category":"section"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"The variables of Areas include:","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"textttarea_exchangea t p_ex","category":"page"},{"location":"area_mode/area/#area_mode-areas-areas-math-con","page":"Areas","title":"Constraints","text":"","category":"section"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"The constraints for areas are calculated within the functions constraints_area and create_area. The function constraints_area is the core function as it links the transmission to and from an area with a local energy system while the function create_area allows for providing additional constraints.","category":"page"},{"location":"area_mode/area/#area_mode-areas-areas-math-con-con","page":"Areas","title":"constraints_area","text":"","category":"section"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"The overall energy balance is solved within this function. We consider two cases:","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"The resource is not an exchange resource:\ntextttflow_outn t p = textttflow_inn t p qquad forall p in inputs(n)  setminus P^ex\nThe resource is an exchange resource:\ntextttflow_outn t p_ex = textttflow_inn t p_ex + textttarea_exchangea t p_ex qquad forall p_ex in P^ex","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"In addition, we have to add constraints for the variable textttarea_exchangea t p_ex. This is achieved through the compute functions as","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"beginaligned\ntextttarea_exchangea t p_ex +  sum_tm in L^from compute_trans_in(t p_ex tm) = \n sum_tm in L^to compute_trans_out(t p_ex tm)\nendaligned","category":"page"},{"location":"area_mode/area/#area_mode-areas-areas-math-con-crea","page":"Areas","title":"create_area","text":"","category":"section"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"The RefArea does not introduce additional constraints.","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"The LimitedExchangeArea introduces additional constraints on the net export from the area. This constraint is given by","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"textttarea_exchangea t p geq - exchange_limit(a p t) qquad forall p in limit_resources(a)","category":"page"},{"location":"area_mode/area/#area_mode-areas-availability","page":"Areas","title":"GeoAvailability","text":"","category":"section"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"The GeoAvailability node is introduced to allow the energy balance of an area being handled on the Area level. It is in itself equivalent to the to GenAvailability node with respect to introduced fields and variables. Availability node provides a detailed description of availability nodes.","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"warning: Energy exchange\nAll energy exchange between different areas is routed through a GeoAvailability node. If you do not use a GeoAvailability node (e.g., a GenAvailability node or no availability node at all), you will not have energy transmission between different regions.","category":"page"},{"location":"area_mode/area/#area_mode-areas-availability-fields","page":"Areas","title":"Introduced types and their fields","text":"","category":"section"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"The GeoAvailability node is similar to a GenAvailability. It includes basic functionalities common to most energy system optimization models.","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"The fields of a GeoAvailability node are given as:","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"id:\nThe field id is only used for providing a name to the node.\ninput::Vector{<:Resource} and output::Vector{<:Resource}:\nBoth fields describe the input and output Resources as vectors. This approach is different to all other nodes, but simplifies the overall design. It is necessary to specify the same Resources to allow for capacity usage in connected nodes.","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"tip: Constructor `GeoAvailability`\nWe require at the time being the specification of the fields input and output due to the way we identify the required flow and link variables. In practice, both fields should include the same Resources. To this end, we provide a simplified constructor in which you only have to specify one vector using the functionGeoAvailability(id, 𝒫::Vector{<:Resource})","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"note: Naming\nWe are aware that GeoAvailability and GenAvailability look similar. We plan to rename one of them with the additional introduction of a constructor. In this case, we introduce breaking changes. We plan to collect as many potential issues as possible before the next breaking changes.","category":"page"},{"location":"area_mode/area/#area_mode-areas-availability-math","page":"Areas","title":"Mathematical description","text":"","category":"section"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"In the following mathematical equations, we use the name for variables and functions used in the model. Variables are in general represented as","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"textttvar_exampleindex_1 index_2","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"with square brackets, while functions are represented as","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"func_example(index_1 index_2)","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"with paranthesis.","category":"page"},{"location":"area_mode/area/#area_mode-areas-availability-math-var","page":"Areas","title":"Variables","text":"","category":"section"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"The variables of GeoAvailability nodes include:","category":"page"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"textttflow_in\ntextttflow_out","category":"page"},{"location":"area_mode/area/#area_mode-areas-availability-math-con","page":"Areas","title":"Constraints","text":"","category":"section"},{"location":"area_mode/area/","page":"Areas","title":"Areas","text":"GeoAvailability nodes do not add any constraints. The overall energy balance is instead calculated on the Area level as outlined above.","category":"page"},{"location":"library/internals/functions/#lib-int-fun","page":"Functions","title":"Internal functions","text":"","category":"section"},{"location":"library/internals/functions/#lib-int-fun-idx","page":"Functions","title":"Index","text":"","category":"section"},{"location":"library/internals/functions/","page":"Functions","title":"Functions","text":"Pages = [\"functions.md\"]","category":"page"},{"location":"library/internals/functions/","page":"Functions","title":"Functions","text":"CurrentModule = EnergyModelsGeography","category":"page"},{"location":"library/internals/functions/#lib-int-fun-ext","page":"Functions","title":"Extension functions","text":"","category":"section"},{"location":"library/internals/functions/","page":"Functions","title":"Functions","text":"create_area\ncreate_model\ncreate_transmission_mode\nupdate_objective(m, 𝒯, ℳ, modeltype::EnergyModel)\nupdate_total_emissions","category":"page"},{"location":"library/internals/functions/#EnergyModelsGeography.create_area","page":"Functions","title":"EnergyModelsGeography.create_area","text":"create_area(m, a::Area, 𝒯, ℒᵗʳᵃⁿˢ, modeltype)\n\nSet all constraints for an Area. Can serve as fallback option for all unspecified subtypes of Area.\n\n\n\n\n\ncreate_area(m, a::LimitedExchangeArea, 𝒯, ℒᵗʳᵃⁿˢ, modeltype)\n\nWhen the area is a LimitedExchangeArea, we limit the export of the specified limit resources p to the providewd value.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.create_model","page":"Functions","title":"EnergyModelsGeography.create_model","text":"create_model(case, modeltype::EnergyModel, m::JuMP.Model; check_timeprofiles::Bool=true)\n\nCreate the model and call all required functions.\n\nInput\n\ncase - The case dictionary requiring the keys :T, :nodes, :links, products as it is the case for standard EnergyModelsBase models. In addition, the keys :areas and :transmission are required for extending the existing model. If the input is not provided in the correct form, the checks will identify the problem.\nmodeltype::EnergyModel - Used modeltype, that is a subtype of the type EnergyModel.\nm - the empty JuMP.Model instance. If it is not provided, then it is assumed that the input is a standard JuMP.Model.\n\nConditional input\n\ncheck_timeprofiles::Bool=true - A boolean indicator whether the time profiles of the individual nodes should be checked or not. It is advised to not deactivate the check, except if you are testing new components. It may lead to unexpected behaviour and potential inconsistencies in the input data, if the time profiles are not checked.\ncheck_any_data::Bool=true - A boolean indicator whether the input data is checked or not. It is advised to not deactivate the check, except if you are testing new features. It may lead to unexpected behaviour and even infeasible models.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.create_transmission_mode","page":"Functions","title":"EnergyModelsGeography.create_transmission_mode","text":"create_transmission_mode(m, tm::TransmissionMode, 𝒯, modeltype::EnergyModel)\n\nSet all constraints for a TransmissionMode.\n\nServes as a fallback option for unspecified subtypes of TransmissionMode.\n\nCalled constraint functions\n\nconstraints_trans_balance,\nconstraints_trans_loss,\nconstraints_capacity,\nconstraints_emission,\nconstraints_opex_fixed, and\nconstraints_opex_var.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.update_objective-Tuple{Any, Any, Any, EnergyModel}","page":"Functions","title":"EnergyModelsGeography.update_objective","text":"update_objective(m, 𝒯, ℳ, modeltype::EnergyModel)\n\nUpdate the objective function with costs related to geography (areas and energy transmission).\n\n\n\n\n\n","category":"method"},{"location":"library/internals/functions/#EnergyModelsGeography.update_total_emissions","page":"Functions","title":"EnergyModelsGeography.update_total_emissions","text":"update_total_emissions(m, 𝒯, ℳ, 𝒫, modeltype::EnergyModel)\n\nUpdate the constraints aggregating total emissions in each operational period with contributions from transmission emissions.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#lib-int-fun-con","page":"Functions","title":"Constraint functions","text":"","category":"section"},{"location":"library/internals/functions/","page":"Functions","title":"Functions","text":"constraints_area\nconstraints_capacity\nconstraints_capacity_installed(m, tm::TransmissionMode, 𝒯::TimeStructure, modeltype::EnergyModel)\nconstraints_emission\nconstraints_opex_fixed\nconstraints_opex_var\nconstraints_trans_balance\nconstraints_trans_loss\nconstraints_transmission","category":"page"},{"location":"library/internals/functions/#EnergyModelsGeography.constraints_area","page":"Functions","title":"EnergyModelsGeography.constraints_area","text":"constraints_area(m, 𝒜, 𝒯, ℒᵗʳᵃⁿˢ, 𝒫, modeltype::EnergyModel)\n\nFunction for creating constraints for the energy balances within an area for each resource using the GeoAvailability node. It keeps track of the exchange with other areas through the variable :area_exchange and the functions compute_trans_in and compute_trans_out.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.constraints_capacity","page":"Functions","title":"EnergyModelsGeography.constraints_capacity","text":"constraints_capacity(m, tm::TransmissionMode, 𝒯::TimeStructure, modeltype::EnergyModel)\nconstraints_capacity(m, tm::PipeMode, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the maximum capacity of a generic TransmissionMode and PipeMode.\n\nThese functions serve as fallback option if no other method is specified for a specific TransmissionMode.\n\nwarning: Dispatching on this function\nIf you create a new method for this function, it is crucial to call within said function the function constraints_capacity_installed(m, tm, 𝒯, modeltype) if you want to include investment options.\n\n\n\n\n\nconstraints_capacity(m, tm::PipeLinepackSimple, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the maximum capacity of a PipeLinepackSimple.\n\nThe difference is given by the inclusion of the linepack storage level constraint.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.constraints_capacity_installed-Tuple{Any, TransmissionMode, TimeStruct.TimeStructure, EnergyModel}","page":"Functions","title":"EnergyModelsGeography.constraints_capacity_installed","text":"constraints_capacity_installed(m, tm::TransmissionMode, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the installed capacity of a TransmissionMode.\n\nThis function serves as fallback option if no other method is specified for a specific TransmissionMode.\n\ndanger: Dispatching on this function\nThis function should only be used to dispatch on the modeltype for providing investments. If you create new capacity variables, it is beneficial to include as well a method for this function and the corresponding transmission mode types.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/functions/#EnergyModelsGeography.constraints_emission","page":"Functions","title":"EnergyModelsGeography.constraints_emission","text":"constraints_emission(m, tm::TransmissionMode, 𝒯, modeltype::EnergyModel)\n\nFunction for creating the constraints on the emissions of a generic TransmissionMode tm.\n\nThis function serves as fallback option if no other function is specified for a TransmissionMode.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.constraints_opex_fixed","page":"Functions","title":"EnergyModelsGeography.constraints_opex_fixed","text":"constraints_opex_fixed(m, tm::TransmissionMode, 𝒯ᴵⁿᵛ, modeltype::EnergyModel)\n\nFunction for creating the constraint on the fixed OPEX of a generic TransmissionMode.\n\nThis function serves as fallback option if no other function is specified for a TransmissionMode.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.constraints_opex_var","page":"Functions","title":"EnergyModelsGeography.constraints_opex_var","text":"constraints_opex_var(m, tm::TransmissionMode, 𝒯ᴵⁿᵛ, modeltype::EnergyModel)\n\nFunction for creating the constraint on the variable OPEX of a generic TransmissionMode.\n\nThis function serves as fallback option if no other function is specified for a TransmissionMode.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.constraints_trans_balance","page":"Functions","title":"EnergyModelsGeography.constraints_trans_balance","text":"constraints_trans_balance(m, tm::TransmissionMode, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the transmission balance for a generic TransmissionMode.\n\nThis function serves as fallback option if no other function is specified for a TransmissionMode.\n\n\n\n\n\nconstraints_trans_balance(m, tm::PipeLinepackSimple, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the transmission balance for a PipeLinepackSimple.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.constraints_trans_loss","page":"Functions","title":"EnergyModelsGeography.constraints_trans_loss","text":"constraints_trans_loss(m, tm::TransmissionMode, 𝒯::TimeStructure, modeltype::EnergyModel)\nconstraints_trans_loss(m, tm::PipeMode, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the transmission loss of a generic TransmissionMode and PipeMode\n\nThese functions serve as fallback option if no other function is specified for a TransmissionMode. If you plan to use the methods, it is necessary that the function loss is either declared for your TransmissionMode or you provide alternatively a new method.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.constraints_transmission","page":"Functions","title":"EnergyModelsGeography.constraints_transmission","text":"constraints_transmission(m, 𝒯, ℳ, modeltype::EnergyModel)\n\nCreate transmission constraints on all transmission corridors.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#lib-int-fun-comp","page":"Functions","title":"Compute functions","text":"","category":"section"},{"location":"library/internals/functions/","page":"Functions","title":"Functions","text":"compute_trans_in\ncompute_trans_out","category":"page"},{"location":"library/internals/functions/#EnergyModelsGeography.compute_trans_in","page":"Functions","title":"EnergyModelsGeography.compute_trans_in","text":"compute_trans_in(m, t, p, tm::TransmissionMode)\ncompute_trans_in(m, t, p, tm::PipeMode)\n\nReturn the amount of resource p going into transmission mode tm in operational period t.\n\nThe function is declared for both a generic TransmissionMode and for a PipeMode.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.compute_trans_out","page":"Functions","title":"EnergyModelsGeography.compute_trans_out","text":"compute_trans_out(m, t, p, tm::TransmissionMode)\ncompute_trans_out(m, t, p, tm::PipeMode)\n\nReturn the amount of resource p going out of transmission mode tm in operational period t.\n\nThe function is declared for both a generic TransmissionMode and for a PipeMode.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#lib-int-fun-var","page":"Functions","title":"Variable creation functions","text":"","category":"section"},{"location":"library/internals/functions/","page":"Functions","title":"Functions","text":"variables_area\nvariables_trans_capacity\nvariables_trans_capex\nvariables_trans_emission\nvariables_trans_modes\nvariables_trans_mode\nvariables_trans_opex","category":"page"},{"location":"library/internals/functions/#EnergyModelsGeography.variables_area","page":"Functions","title":"EnergyModelsGeography.variables_area","text":"variables_area(m, 𝒜, 𝒯, ℒᵗʳᵃⁿˢ, modeltype::EnergyModel)\n\nDeclaration of a variable :area_exchange to track how much energy is exchanged from an area for all operational periods t ∈ 𝒯. The variable is only declared for resources that are exchanged from a given area.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.variables_trans_capacity","page":"Functions","title":"EnergyModelsGeography.variables_trans_capacity","text":"variables_trans_capacity(m, 𝒯, ℳ, modeltype::EnergyModel)\n\nDeclaration of variables for tracking how much of installed transmision capacity is used in all operational periods t ∈ 𝒯 of the tranmission modes.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.variables_trans_capex","page":"Functions","title":"EnergyModelsGeography.variables_trans_capex","text":"EMG.variables_trans_capex(m, 𝒯, ℳ,, modeltype::EMB.AbstractInvestmentModel)\n\nCreate variables for the capital costs for the investments in transmission.\n\nAdditional variables for investment in capacity:\n\n:trans_cap_capex - CAPEX costs for increases in the capacity of a transmission mode\n:trans_cap_current - installed capacity for storage in each strategic period\n:trans_cap_add - added capacity\n:trans_cap_rem - removed capacity\n:trans_cap_invest_b - binary variable whether investments in capacity are happening\n:trans_cap_remove_b - binary variable whether investments in capacity are removed\n\n\n\n\n\nvariables_trans_capex(m, 𝒯, ℳ, modeltype::EnergyModel)\n\nCreate variables for the capital costs for the investments in transmission. Empty function to allow for multiple dispatch in the EnergyModelsInvestment package.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.variables_trans_emission","page":"Functions","title":"EnergyModelsGeography.variables_trans_emission","text":"variables_trans_emission(m, 𝒯, ℳ, 𝒫, modeltype)\n\nDeclation of variables for the modeling of transmission emissions. These variables are only created for transmission modes where emissions are included. All emission resources that are not included for a type are fixed to a value of 0.\n\nThe emission variables are differentiated in:\n\n:emissions_trans - emissions of a transmission mode tm in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.variables_trans_modes","page":"Functions","title":"EnergyModelsGeography.variables_trans_modes","text":"variables_trans_modes(m, 𝒯, ℳ, modeltype::EnergyModel)\n\nLoop through all TransmissionMode types and create variables specific to each type. This is done by calling the method variables_trans_mode on all modes of each type.\n\nThe TransmissionMode type representing the widest category will be called first. That is, variables_trans_mode will be called on a TransmissionMode before it is called on PipeMode.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.variables_trans_mode","page":"Functions","title":"EnergyModelsGeography.variables_trans_mode","text":"variables_trans_mode(m, 𝒯, ℳˢᵘᵇ::Vector{<:TransmissionMode}, modeltype::EnergyModel)\n\nDefault fallback method when no function is defined for a TransmissionMode type. It introduces the variables that are required in all TransmissionModes.\n\nThese variables are:\n\n:trans_in - inlet flow to transmission mode\n:trans_out - outlet flow from a transmission mode\n:trans_loss - loss during transmission\n:trans_loss_neg - negative loss during transmission, helper variable if bidirectional transport is possible\n:trans_loss_pos - positive loss during transmission, helper variable if bidirectional transport is possible\n\n\n\n\n\nvariables_trans_mode(m, 𝒯, ℳᴸᴾ::Vector{<:PipeLinepackSimple}, modeltype::EnergyModel)\n\nWhen the node vector is a Vector{<:PipeLinepackSimple}, we declare the variable :linepack_stor_level to account for the energy stored through line packing.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.variables_trans_opex","page":"Functions","title":"EnergyModelsGeography.variables_trans_opex","text":"variables_trans_opex(m, 𝒯, ℳ, modeltype::EnergyModel)\n\nDeclaration of variables for the operational costs (:trans_opex_var and :trans_opex_fixed) of the tranmission modes.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#lib-int-fun-check","page":"Functions","title":"Check functions","text":"","category":"section"},{"location":"library/internals/functions/","page":"Functions","title":"Functions","text":"check_area\ncheck_case_data\ncheck_data\ncheck_mode\ncheck_time_structure\ncheck_transmission","category":"page"},{"location":"library/internals/functions/#EnergyModelsGeography.check_area","page":"Functions","title":"EnergyModelsGeography.check_area","text":"check_area(a::Area, 𝒯, 𝒫, modeltype::EnergyModel, check_timeprofiles::Bool)\n\nCheck that the fields of an Area corresponds to required structure.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.check_case_data","page":"Functions","title":"EnergyModelsGeography.check_case_data","text":"check_case_data(case)\n\nChecks the case dictionary is in the correct format. The function is only checking the new, additional data as we do not yet consider dispatch on the case data.\n\nChecks\n\nThe dictionary requires the keys :areas and :transmission.\nThe individual keys are of the correct type, that is\n:areas::Area and\n:transmission::Vector{<:Transmission}.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.check_data","page":"Functions","title":"EnergyModelsGeography.check_data","text":"check_data(case, modeltype, check_timeprofiles::Bool)\n\nCheck if the case data is consistent. Use the @assert_or_log macro when testing. Currently, not checking data except that the case dictionary follows the required structure.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.check_mode","page":"Functions","title":"EnergyModelsGeography.check_mode","text":"check_mode(m::TransmissionMode, 𝒯, 𝒫, modeltype::EnergyModel, check_timeprofiles::Bool)\n\nCheck that the fields of a TransmissionMode corresponds to required structure.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.check_time_structure","page":"Functions","title":"EnergyModelsGeography.check_time_structure","text":"check_time_structure(m::TransmissionMode, 𝒯)\n\nCheck that all fields of a TransmissionMode that are of type TimeProfile correspond to the time structure 𝒯.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.check_transmission","page":"Functions","title":"EnergyModelsGeography.check_transmission","text":"check_transmission(l::Transmission, 𝒯, 𝒫, modeltype::EnergyModel, check_timeprofiles::Bool)\n\nCheck that the fields of a Transmission corridor corresponds to required structure.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#lib-int-fun-identi","page":"Functions","title":"Identification functions","text":"","category":"section"},{"location":"library/internals/functions/","page":"Functions","title":"Functions","text":"extract_resources\nexport_resources\nimport_resources\nhas_emissions\nemission\nemit_resources\nis_bidirectional\ntrans_sub","category":"page"},{"location":"library/internals/functions/#EnergyModelsGeography.extract_resources","page":"Functions","title":"EnergyModelsGeography.extract_resources","text":"extract_resources(ℒᵗʳᵃⁿˢ, resource_method)\n\nReturn the resources transported/consumed by the transmission corridors in ℒᵗʳᵃⁿˢ.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.export_resources","page":"Functions","title":"EnergyModelsGeography.export_resources","text":"export_resources(ℒᵗʳᵃⁿˢ, a::Area)\n\nReturn the resources exported from area a on the transmission corridors in ℒᵗʳᵃⁿˢ.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.import_resources","page":"Functions","title":"EnergyModelsGeography.import_resources","text":"import_resources(ℒᵗʳᵃⁿˢ, a::Area)\n\nReturn the resources imported into area a on the transmission corridors in ℒᵗʳᵃⁿˢ.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.has_emissions","page":"Functions","title":"EnergyModelsGeography.has_emissions","text":"has_emissions(tm::TransmissionMode)\n\nReturns whether there are emissions associated with transmission mode tm. Default behaviour is no emissions.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.emission","page":"Functions","title":"EnergyModelsGeography.emission","text":"emission(tm::TransmissionMode, p::EMB.ResourceEmit)\nemission(tm::TransmissionMode, p::EMB.ResourceEmit, t)\n\nReturns the emission of transmission mode tm of a specific resource p as TimeProfile or in operational period ts.\n\nnote: Transmission emissions\nNone of the provided TransmissionModes include emissions. If you plan to include emissions, you have to both create a new TransmissionMode and dispatch on this function.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.emit_resources","page":"Functions","title":"EnergyModelsGeography.emit_resources","text":"emit_resources(m::TransmissionMode)\n\nReturns the types of emissions associated with transmission mode tm.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.is_bidirectional","page":"Functions","title":"EnergyModelsGeography.is_bidirectional","text":"is_bidirectional(tm::TransmissionMode)\n\nChecks whether transmission mode tm is bidirectional.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#EnergyModelsGeography.trans_sub","page":"Functions","title":"EnergyModelsGeography.trans_sub","text":"trans_sub(ℒᵗʳᵃⁿˢ, a::Area)\n\nReturn connected transmission corridors for a given area a.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/functions/#lib-int-fun-util","page":"Functions","title":"Utility functions","text":"","category":"section"},{"location":"library/internals/functions/","page":"Functions","title":"Functions","text":"connected_nodes","category":"page"},{"location":"library/internals/functions/#EnergyModelsGeography.connected_nodes","page":"Functions","title":"EnergyModelsGeography.connected_nodes","text":"connected_nodes(n::EMB.Node, ℒ::Vector{<:Link}, nodes::Vector{EMB.Node})\n\nReturns a vector of all unique nodes connected to node n through links ℒ. The corresponding links are also returned.\n\nArguments\n\nn::EMB.Node is the node from which the connections are evaluated.\nℒ::Vector{<:Link} is a vector of links that should be evaluated.\nnodes::Vector{EMB.Node} is a vector of nodes that should not be included.\n\n\n\n\n\n","category":"function"},{"location":"manual/simple-example/#man-exampl","page":"Example","title":"Examples","text":"","category":"section"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"For the content of the example, see the examples directory in the project repository.","category":"page"},{"location":"manual/simple-example/#The-package-is-installed-with-]-add","page":"Example","title":"The package is installed with ] add","text":"","category":"section"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"From the Julia REPL, run","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"# Starts the Julia REPL\njulia> using EnergyModelsGeography\n# Get the path of the examples directory\njulia> exdir = joinpath(pkgdir(EnergyModelsGeography), \"examples\")\n# Include the code into the Julia REPL to run the examples\njulia> include(joinpath(exdir, \"network.jl\"))","category":"page"},{"location":"manual/simple-example/#The-code-was-downloaded-with-git-clone","page":"Example","title":"The code was downloaded with git clone","text":"","category":"section"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"The examples can be run from the terminal with","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"~/../energymodelsgeography.jl/examples $ julia network.jl","category":"page"},{"location":"library/public/transmission/#lib-pub-transmission","page":"Transmission","title":"Transmission","text":"","category":"section"},{"location":"library/public/transmission/","page":"Transmission","title":"Transmission","text":"Transmission occurs on specified transmission corridors from one area to another. On each corridor, there can exist several TransmissionModes that are transporting resources using a range of technologies.","category":"page"},{"location":"library/public/transmission/","page":"Transmission","title":"Transmission","text":"It is important to consider the from and to Area when specifying a Transmission corridor. The chosen direction has an influence on whether the variables texttttrans_inm t and texttttrans_outm t are positive or negative for exports in the case of bidirectional transport. This is also explained on the page Optimization variables.","category":"page"},{"location":"library/public/transmission/#lib-pub-transmission-types","page":"Transmission","title":"Transmission types","text":"","category":"section"},{"location":"library/public/transmission/","page":"Transmission","title":"Transmission","text":"Transmission","category":"page"},{"location":"library/public/transmission/#EnergyModelsGeography.Transmission","page":"Transmission","title":"EnergyModelsGeography.Transmission","text":"A Transmission corridor.\n\nA geographic corridor where TransmissionModes are used to transport resources.\n\nFields\n\nfrom::Area is the area resources are transported from.\nto::Area is the area resources are transported to.\nmodes::Vector{<:Transmission} are the transmission modes that are available.\n\n\n\n\n\n","category":"type"},{"location":"library/public/transmission/#lib-pub-transmission-fun_fields","page":"Transmission","title":"Functions for accessing fields of Transmission types","text":"","category":"section"},{"location":"library/public/transmission/","page":"Transmission","title":"Transmission","text":"The following functions are defined for accessing fields from a Transmission as well as finding a subset of Transmission corridors:","category":"page"},{"location":"library/public/transmission/","page":"Transmission","title":"Transmission","text":"modes\nmodes_sub\ncorr_from\ncorr_to\ncorr_from_to\nmodes_of_dir","category":"page"},{"location":"library/public/transmission/#EnergyModelsGeography.modes","page":"Transmission","title":"EnergyModelsGeography.modes","text":"modes(l::Transmission)\nmodes(ℒᵗʳᵃⁿˢ::Vector{<:Transmission})\n\nReturn an array of the transmission modes for a transmission corridor l or for a vector of transmission corridors ℒᵗʳᵃⁿˢ.\n\n\n\n\n\n","category":"function"},{"location":"library/public/transmission/#EnergyModelsGeography.modes_sub","page":"Transmission","title":"EnergyModelsGeography.modes_sub","text":"modes_sub(ℳ::Vector{<:TransmissionMode}, string::String)\n\nReturns all transmission modes that include in the name the string.\n\n\n\n\n\nmodes_sub(ℳ::Vector{<:TransmissionMode}, string_array::Array{String})\n\nReturns all transmission modes that include in the name all entries of the array string_array.\n\n\n\n\n\nmodes_sub(l::Transmission, mode_type::TransmissionMode)\nmodes_sub(ℒᵗʳᵃⁿˢ::Vector{<:Transmission}, mode_type::TransmissionMode)\n\nReturn an array containing all TransmissionModes of type mode_type in Transmission corridor l or for a vector of transmission corridors ℒᵗʳᵃⁿˢ.\n\n\n\n\n\nmodes_sub(l::Transmission, p::Resource)\n\nReturn an array containing all TransmissionModes that transport the resource p in Transmission corridor l or in a vector of transmission corridors ℒᵗʳᵃⁿˢ.\n\n\n\n\n\n","category":"function"},{"location":"library/public/transmission/#EnergyModelsGeography.corr_from","page":"Transmission","title":"EnergyModelsGeography.corr_from","text":"corr_from(from::Area, ℒᵗʳᵃⁿˢ)\ncorr_from(from::String, ℒᵗʳᵃⁿˢ)\n\nReturns all transmission corridors in ℒᵗʳᵃⁿˢ that orginate in the Area from. If from is provided as String, it returns the corridors in which the name is equal to from\n\n\n\n\n\n","category":"function"},{"location":"library/public/transmission/#EnergyModelsGeography.corr_to","page":"Transmission","title":"EnergyModelsGeography.corr_to","text":"corr_to(to::Area, ℒᵗʳᵃⁿˢ)\ncorr_to(to::String, ℒᵗʳᵃⁿˢ)\n\nReturns all transmission corridors in ℒᵗʳᵃⁿˢ that end in the Area to. If to is provided as String, it returns the corridors in which the name is equal to to\n\n\n\n\n\n","category":"function"},{"location":"library/public/transmission/#EnergyModelsGeography.corr_from_to","page":"Transmission","title":"EnergyModelsGeography.corr_from_to","text":"corr_from_to(from::Union{Area,String}, to::Union{Area,String}, ℒᵗʳᵃⁿˢ)\n\nReturns the transmission corridor that orginate in the Area from and end in the Area to.\n\nThe function accepts both inputs as String and Area as well as a combination of both\n\n\n\n\n\n","category":"function"},{"location":"library/public/transmission/#EnergyModelsGeography.modes_of_dir","page":"Transmission","title":"EnergyModelsGeography.modes_of_dir","text":"modes_of_dir(ℒ, dir::Int)\n\nReturn the transmission modes of dir directions for transmission modes ℳ.\n\n\n\n\n\nmodes_of_dir(l, dir::Int)\n\nReturn the transmission modes of dir directions for transmission corridor l`.\n\n\n\n\n\n","category":"function"},{"location":"manual/quick-start/#man-quick","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"Install the most recent version of Julia\nInstall the package EnergyModelsBase and the time package TimeStruct, by running:\n] add TimeStruct\n] add EnergyModelsBase\nThese packages are required as we do not only use them internally, but also for building a model.\nInstall the package EnergyModelsGeography\n] add EnergyModelsGeography","category":"page"},{"location":"how-to/update-models/#how_to-update","page":"Update models","title":"Update your model to the latest versions","text":"","category":"section"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"EnergyModelsGeography is still in a pre-release version. Hence, there are frequently breaking changes occuring, although we plan to keep backwards compatibility. This document is designed to provide users with information regarding how they have to adjust their models to keep compatibility to the latest changes. We will as well implement information regarding the adjustment of extension packages, although this is more difficult due to the vast majority of potential changes.","category":"page"},{"location":"how-to/update-models/#how_to-update-09","page":"Update models","title":"Adjustments from 0.9.x","text":"","category":"section"},{"location":"how-to/update-models/#how_to-update-06-mode","page":"Update models","title":"Key changes for transmission mode descriptions","text":"","category":"section"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"Version 0.10 removed the keyword definition of PipeSimple and PipeLinepackSimple. A key aim behind this removal is to avoid having to specify the fields if one does not provide a value to the data or the directions field. This was solved through","category":"page"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"an internal constructor only allowing for unidirectional pipelines and\nan external constructor for cases in which the field data is not specified.","category":"page"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"Bidirectional transport for pipelines was removed as the model did not support it. A key factor here is the consuming resource which is required for pumping or compression energy demand. In the case of bidirectional transport, the consuming resource is consumed in the from region. In the case of reversed flow, this would lead to undesired behavior. Previously, warnings were printed. We consider it to be more consistent with the framework philosophy to remove that potential source of error.","category":"page"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"danger: New subtypes for `PipeMode`\nIt is still possible for the user to provide new PipeModes that provide bidirectional transport. In this case, it is necessary to provide new methods for constraints_capacity and constraints_trans_loss. Otherwise, warnings will be provided and unidirectional transport used.The variable OPEX calculation is wrong if you receive the warnings.","category":"page"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"The translations below describe the keyword constructor. You only have to remove the entry to the field of directions.","category":"page"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"note: Timeline for constructors\nThe legacy constructors for calls of the composite types of version 0.9 will be included at least until version 0.11. However, it is recommended to update your model as soon as possible to the latest version.","category":"page"},{"location":"how-to/update-models/#[PipeSimple](@ref)","page":"Update models","title":"PipeSimple","text":"","category":"section"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"# The previous description for PipeSimple was given by:\nPipeSimple(;\n    id::String,\n    inlet::EMB.Resource,\n    outlet::EMB.Resource,\n    consuming::EMB.Resource,\n    consumption_rate::TimeProfile,\n    trans_cap::TimeProfile,\n    trans_loss::TimeProfile,\n    opex_var::TimeProfile,\n    opex_fixed::TimeProfile,\n    directions::Int = 1,            # This value cannot be specified any longer\n    data::Vector{Data} = Data[],\n)\n\n# This translates to the following new version\n PipeSimple(\n    id,\n    inlet,\n    outlet,\n    consuming,\n    consumption_rate,\n    trans_cap,\n    trans_loss,\n    opex_var,\n    opex_fixed,\n    data,\n)","category":"page"},{"location":"how-to/update-models/#[PipeLinepackSimple](@ref)","page":"Update models","title":"PipeLinepackSimple","text":"","category":"section"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"# The previous description for PipeLinepackSimple was given by:\nPipeLinepackSimple(;\n    id::String,\n    inlet::EMB.Resource,\n    outlet::EMB.Resource,\n    consuming::EMB.Resource,\n    consumption_rate::TimeProfile,\n    trans_cap::TimeProfile,\n    trans_loss::TimeProfile,\n    opex_var::TimeProfile,\n    opex_fixed::TimeProfile,\n    energy_share::Float64,\n    directions::Int = 1,            # This value cannot be specified any longer\n    data::Vector{Data} = Data[],\n)\n\n# This translates to the following new version\nPipeLinepackSimple(\n    id,\n    inlet,\n    outlet,\n    consuming,\n    consumption_rate,\n    trans_cap,\n    trans_loss,\n    opex_var,\n    opex_fixed,\n    energy_share,\n    data,\n)","category":"page"},{"location":"how-to/update-models/#how_to-update-07","page":"Update models","title":"Adjustments from 0.7.x","text":"","category":"section"},{"location":"how-to/update-models/#[GeoAvailability](@ref)","page":"Update models","title":"GeoAvailability","text":"","category":"section"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"GeoAvailability nodes do not require any longer the data for input and output, as they utilize a constructor, if only a single array is given.","category":"page"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"# The previous nodal description was given by:\nGeoAvailability(\n    id,\n    input::Dict{<:Resource,<:Real},\n    output::Dict{<:Resource,<:Real},\n)\n\n# This translates to the following new version\nGeoAvailability(id, collect(keys(input)), collect(keys(output)))","category":"page"},{"location":"manual/investments/#man-emi","page":"Investment options","title":"Adding investments","text":"","category":"section"},{"location":"manual/investments/","page":"Investment options","title":"Investment options","text":"Investment options are added through loading the package EnergyModelsInvestments. EnergyModelsInvestments was previously seen as extension package to EnergyModelsBase, that it was dependent on EnergyModelsBase and only allowed investment options in EnergyModelsBase. This approach was reversed from version 0.7 onwards and EnergyModelsInvestments is now a standalone package and provides an extension to EnergyModelsBase.","category":"page"},{"location":"manual/investments/","page":"Investment options","title":"Investment options","text":"As a consequence, it was not also necessary to move the EnergyModelsGeography extension of EnergyModelsInvestments to an EnergyModelsInvestments extension of EnergyModelsGeography.","category":"page"},{"location":"manual/investments/#man-emi-gen","page":"Investment options","title":"General concept","text":"","category":"section"},{"location":"manual/investments/","page":"Investment options","title":"Investment options","text":"Investment options are added separately to each individual transmission mode through the field data. This is similar to the approach used in Hence, it is possible to use different prices for the same technology in different regions or allow investments only in a limited subset of technologies.","category":"page"},{"location":"manual/investments/","page":"Investment options","title":"Investment options","text":"Transmission mode investments utilize the same data type SingleInvData as the majority of the node investments. This type inludes as fields AbstractInvData which can be either in the form of StartInvData or NoStartInvData. The exact description of the individual investment data and their fields can be found in the public library of EnergyModelsInvestments.","category":"page"},{"location":"manual/investments/","page":"Investment options","title":"Investment options","text":"Investments require the application of an InvestmentModel instead of an OperationalModel. This allows us to provide two core functions with new methods, constraints_capacity_installed (as described on Constraint functions), variables_trans_capex, a function previously not declaring any variables, and the update to the objective functoin update_objective.","category":"page"},{"location":"manual/investments/#man-emi-var","page":"Investment options","title":"Added variables","text":"","category":"section"},{"location":"manual/investments/","page":"Investment options","title":"Investment options","text":"Investment options increase the number of variables. The individual variables are described in the documentation of EnergyModelsInvestments.","category":"page"},{"location":"manual/investments/","page":"Investment options","title":"Investment options","text":"All transmission modes with investments use the prefix :trans.","category":"page"},{"location":"manual/philosophy/#man-phil","page":"Philosophy","title":"Philosophy","text":"","category":"section"},{"location":"manual/philosophy/#man-phil-gen","page":"Philosophy","title":"General design philosophy","text":"","category":"section"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"This package extends EnergyModelsBase with geographical functionalities. The geographical representation is achieved through individual Areas coupled with Transmission corridors. Each area can represent an individual energy system with different technology Nodes and Links between the Nodes. Transmission corridors define pathways from one Area to another Area. Each corridor can have multiple TransmissionModes used to transport resources. The TransmissionModes can be static infrastructure such as PipelineMode or dynamic modes such as ships. The latter is in the current stage not yet implemented.","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"The extension of EnergyModelsBase is achieved through calling on the function create_model within EnergyModelsGeography. This corresponds to the 2ⁿᵈ bullet point in the list of Extensions to the model.","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"Each Area is assocoiated with corresponding latitude and longitude coordinates. These coordinates can be utilized to calculate the distance between two Areas. It is however not a necessity to base the distance on the coordinates. The values are in practice not used directly, but can be used by the user when calculating, e.g, OPEX values or transmission losses. It is in addition also not necesseary to use the same distance for individual TransmissionModes within a Transmission corridor. This can be beneficial for the case of power lines vs. pipelines which may require a different routing due to the geographical features of a region.","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"EnergyModelsGeography does not directly allow for emissions associated with transport of energy or mass. We included in an internal version one approach to extend the emission constraints, but are not yet satisfied with the exact implementation. This implies that including emissions in mass/energy transport is on the agenda for future improvements.","category":"page"},{"location":"manual/philosophy/#man-phil-ext","page":"Philosophy","title":"Extensions to the model","text":"","category":"section"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"EnergyModelsGeography is also designed to be extended by the user. Extensions of EnergyModelsGeography are possible through","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"specialized Areas (like the LimitedExchangeArea) and\nnew TransmissionModes.","category":"page"},{"location":"manual/philosophy/#man-phil-ext-area","page":"Philosophy","title":"Specialized Areas","text":"","category":"section"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"Specialized Areas are areas with additional constraints. In general, it is possible to import and export as much as possible through the connected Transmission corridors. Introducing specialized Areas allow the introduciton of additional constraints within an Area. These constraints can include, among others, limits on the CO₂ emissions within an Area, export limits both on, e.g. operational or strategic periods as well as many other modifications.","category":"page"},{"location":"manual/philosophy/#man-phil-ext-transmissioN_mode","page":"Philosophy","title":"New TransmissionModes","text":"","category":"section"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"New TransmissionModes may be relevant for describing a dynamic transport mechanism or for adding a distinctive description for an energy carrier. TransmissionModes can be developed similar to new Nodes as described in EnergyModelsBase.","category":"page"},{"location":"manual/constraint-functions/#man-con","page":"Constraint functions","title":"Constraint functions","text":"","category":"section"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"The package provides standard constraint functions that can be use for new developed TransmissionModes. The general approach is similar to EnergyModelsBase. Bidirectional transport requires at the time being the introduciton of an if-loop. In later implementation, it is planned to also use dispatch for this analysis as well.","category":"page"},{"location":"manual/constraint-functions/#man-con-cap","page":"Constraint functions","title":"Capacity constraints","text":"","category":"section"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_capacity(m, tm::TransmissionMode, 𝒯::TimeStructure, modeltype::EnergyModel)","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"correponds to the constraints on the capacity usage of a transmission mode tm. It is implemented for both the TransmissionMode and PipeMode abstract types as well as PipeLinepackSimple concrete type. The key difference between the former two is related that PipeMode does not allows for bidirectional transport. PipeLinepackSimple includes in addition the maximum storage capacity for a pipeline when considering linepacking. The implementation is still preliminary and based on a simplified potential for energy storage in a pipeline.","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"Within this function, the function","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_capacity_installed(m, tm::TransmissionMode, 𝒯::TimeStructure, modeltype::EnergyModel)","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"is called to limit the variable texttttrans_cap_inst of transmission mode tm. This functions is also used to subsequently dispatch on model type for the introduction of investments.","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"warning: Warning\nAs the function constraints_capacity_installed is used for including investments for tranmission modes, it is important that it is also called when creating a new mode. It is not possible to only add a function forconstraints_capacity_installed(m, tm::TransmissionMode, 𝒯::TimeStructure, modeltype::EnergyModel)without adding a function forconstraints_capacity_installed(m, tm::TransmissionMode, 𝒯::TimeStructure, modeltype::EMB.AbstractInvestmentModel)as this can lead to a method ambiguity error.","category":"page"},{"location":"manual/constraint-functions/#man-con-trans_loss","page":"Constraint functions","title":"Transmission loss functions","text":"","category":"section"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_trans_loss(m, tm::TransmissionMode, 𝒯ᴵⁿᵛ, modeltype::EnergyModel)","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"correponds to the constraints on the energy balance of a transmission mode tm. It is implemented for both the TransmissionMode and PipeMode abstract types. The key difference between the two is related that PipeMode does not allows for bidirectional transport. The loss is calculated for the provided TransmissionModes as relative loss of the transported energy.","category":"page"},{"location":"manual/constraint-functions/#man-con-balance","page":"Constraint functions","title":"Balance functions","text":"","category":"section"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_trans_balance(m, tm::TransmissionMode, 𝒯ᴵⁿᵛ, modeltype::EnergyModel)","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"correponds to the constraints on the energy balance of a transmission mode tm. It is implemented for both the TransmissionMode and PipeLinepackSimple abstract types. The standard approach only relies on the conservation of mass/energy, while storage is not included. PipeLinePackSimple also includes the overall mass balance for the energy storage within the pipeline.","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"note: Note\nPipeLinePackSimple does not support representative periods correctly. In practice, seasonal energy storage through linepacking is unrealistic due to the small volume. The implementation is working with the assumption that the initial level in a representative period is equal to the final level in the last representative period of a strategic period. This implies that it does not account correctly for the remaining level at the end of a representative period.","category":"page"},{"location":"manual/constraint-functions/#man-con-opex","page":"Constraint functions","title":"Operational expenditure constraints","text":"","category":"section"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_opex_fixed(m, tm::TransmissionMode, 𝒯ᴵⁿᵛ, modeltype::EnergyModel)","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"corresponds to the constraints calculating the fixed operational costs of a transmission mode tm. There is currently only a single implemented version. It can however be extended, if desirable.","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_opex_var(m, tm::TransmissionMode, 𝒯ᴵⁿᵛ, modeltype::EnergyModel)","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"corresponds to the constraints calculating the variable operational costs of a transmission mode tm. There is currently only a single implemented version. It can however be extended, if desirable.","category":"page"},{"location":"library/internals/methods_EMIExt/#lib-int-EMIext","page":"Methods EnergyModelsInvestments","title":"Internals - EnergyModelsInvestment extension","text":"","category":"section"},{"location":"library/internals/methods_EMIExt/#lib-int-EMIext-idx","page":"Methods EnergyModelsInvestments","title":"Index","text":"","category":"section"},{"location":"library/internals/methods_EMIExt/","page":"Methods EnergyModelsInvestments","title":"Methods EnergyModelsInvestments","text":"Pages = [\"methods_EMIExt.md\"]","category":"page"},{"location":"library/internals/methods_EMIExt/","page":"Methods EnergyModelsInvestments","title":"Methods EnergyModelsInvestments","text":"CurrentModule =\n    Base.get_extension(EMG, :EMIExt)","category":"page"},{"location":"library/internals/methods_EMIExt/#lib-int-EMIext-EMG","page":"Methods EnergyModelsInvestments","title":"EnergyModelsGeography","text":"","category":"section"},{"location":"library/internals/methods_EMIExt/#lib-int-EMIext-EMG-met","page":"Methods EnergyModelsInvestments","title":"Methods","text":"","category":"section"},{"location":"library/internals/methods_EMIExt/","page":"Methods EnergyModelsInvestments","title":"Methods EnergyModelsInvestments","text":"EMG.update_objective(m, 𝒯, ℳ, modeltype::EMB.AbstractInvestmentModel)\nEMG.constraints_capacity_installed(m, tm::TransmissionMode, 𝒯::TimeStructure, modeltype::EMB.AbstractInvestmentModel)\nEMG.variables_trans_capex(m, 𝒯, ℳ, modeltype::EMB.AbstractInvestmentModel)","category":"page"},{"location":"library/internals/methods_EMIExt/#EnergyModelsGeography.update_objective-Tuple{Any, Any, Any, AbstractInvestmentModel}","page":"Methods EnergyModelsInvestments","title":"EnergyModelsGeography.update_objective","text":"EMG.update_objective(m, 𝒯, ℳ, modeltype::EMB.AbstractInvestmentModel)\n\nCreate objective function overloading the default from EnergyModelsBase for AbstractInvestmentModel.\n\nMaximize Net Present Value from revenues, investments (CAPEX) and operations (OPEX)\n\nTODO:\n\n* consider passing expression around for updating\n\n* consider reading objective and adding terms/coefficients (from model object m)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/methods_EMIExt/#EnergyModelsGeography.constraints_capacity_installed-Tuple{Any, TransmissionMode, TimeStruct.TimeStructure, AbstractInvestmentModel}","page":"Methods EnergyModelsInvestments","title":"EnergyModelsGeography.constraints_capacity_installed","text":"EMG.constraints_capacity_installed(\n    m,\n    tm::TransmissionMode,\n    𝒯::TimeStructure,\n    modeltype::EMB.AbstractInvestmentModel,\n)\n\nWhen the modeltype is an investment model, the function introduces the related constraints for the capacity expansion. The investment mode and lifetime mode are used for adding constraints.\n\nThe default function only accepts nodes with SingleInvData. If you have several capacities for investments, you have to dispatch specifically on the function.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/methods_EMIExt/#EnergyModelsGeography.variables_trans_capex-Tuple{Any, Any, Any, AbstractInvestmentModel}","page":"Methods EnergyModelsInvestments","title":"EnergyModelsGeography.variables_trans_capex","text":"EMG.variables_trans_capex(m, 𝒯, ℳ,, modeltype::EMB.AbstractInvestmentModel)\n\nCreate variables for the capital costs for the investments in transmission.\n\nAdditional variables for investment in capacity:\n\n:trans_cap_capex - CAPEX costs for increases in the capacity of a transmission mode\n:trans_cap_current - installed capacity for storage in each strategic period\n:trans_cap_add - added capacity\n:trans_cap_rem - removed capacity\n:trans_cap_invest_b - binary variable whether investments in capacity are happening\n:trans_cap_remove_b - binary variable whether investments in capacity are removed\n\n\n\n\n\n","category":"method"},{"location":"library/internals/methods_EMIExt/#lib-int-EMIext-EMI","page":"Methods EnergyModelsInvestments","title":"EnergyModelsInvestments","text":"","category":"section"},{"location":"library/internals/methods_EMIExt/#lib-int-EMIext-met","page":"Methods EnergyModelsInvestments","title":"Methods","text":"","category":"section"},{"location":"library/internals/methods_EMIExt/","page":"Methods EnergyModelsInvestments","title":"Methods EnergyModelsInvestments","text":"EMI.get_var_inst\nEMI.has_investment\nEMI.investment_data","category":"page"},{"location":"library/internals/methods_EMIExt/#EnergyModelsInvestments.get_var_inst","page":"Methods EnergyModelsInvestments","title":"EnergyModelsInvestments.get_var_inst","text":"EMI.get_var_inst(m, prefix::Symbol, tm::EMG.TransmissionMode)\n\nWhen the transmission mode tm is used as conditional input, it extracts only the variable for the specified transmission mode.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods_EMIExt/#EnergyModelsInvestments.has_investment","page":"Methods EnergyModelsInvestments","title":"EnergyModelsInvestments.has_investment","text":"EMI.has_investment(tm::EMG.TransmissionMode)\n\nFor a given transmission mode tm, checks that it contains the required investment data.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods_EMIExt/#EnergyModelsInvestments.investment_data","page":"Methods EnergyModelsInvestments","title":"EnergyModelsInvestments.investment_data","text":"EMI.investment_data(tm::EMG.TransmissionMode)\nEMI.investment_data(tm::EMG.TransmissionMode, field::Symbol)\n\nReturn the InvestmentData of the transmission mode tm or if field is specified, it returns the InvData for the corresponding capacity.\n\n\n\n\n\n","category":"function"},{"location":"area_mode/mode/#area_mode-trans_mode","page":"Transmission modes","title":"Transmission modes","text":"","category":"section"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"Transmission modes are introduced to model different approaches for transmission for resources. These transmission modes are located within a transmission corridor. In general, transmission modes are designed to only transport a single Resource","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"Pages = [\n    \"area_mode/mode.md\",\n    ]\nDepth = 2","category":"page"},{"location":"area_mode/mode/#area_mode-trans_mode-fields","page":"Transmission modes","title":"Introduced types and their fields","text":"","category":"section"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"EnergyModelsGeography provides multiple TransmissionModes that can be introduced in models. The hierarchy of the individual transmission modes is given by:","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"TransmissionMode\n├─ PipeMode\n│  ├─ PipeLinepackSimple\n│  └─ PipeSimple\n├─ RefDynamic\n└─ RefStatic","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"The individual modes use in general the same constraint functions and have the same fields with minor variations. Hence, all nodes with be presented below.","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"The fields of the types are given as:","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"id:\nThe field id is only used for providing a name to the transmission mode.\nTransported resource fields:\nRefStatic and RefDynamic\nresource::EMB.Resource :\nThe field resource corresponds to the transported Resource. The same resource is entering and leaving a transmission mode. Hence, pressure drop cannot be considered.\nPipeMode; PipeSimple and PipeLinepackSimple\ninlet::EMB.Resource and outlet::EMB.Resource:\nThe implemented PipeModes allow for a differentiation between the Resource entering a transmission mode and the one leaving. This allows the incorporation of a pressure drop, albeit not through pressure drop equations but through a fixed pressure drop.\nconsuming::EMB.Resource and  consumption_rate::TimeProfile: PipeModes introduce furthermore a consuming Resource. The consuming resource is required to transport the inlet resource. The proportionality is given by the value provided in the field consumption_rate.\nnote: New `PipeMode` types\nIntroducing new PipeMode types requires you to provide the same fields. Alternatively, you have to provide new methods to the functions, EMB.inputs, EMB.outputs, and consumption_rate.\ntrans_cap::TimeProfile:\nThe installed capacity corresponds to the nominal capacity of the transmission mode. It is the outlet capacity and not the inlet capacity, that is after the calculation of the loss in the transmission mode.\nIf the node should contain investments through the application of EnergyModelsInvestments, it is important to note that you can only use FixedProfile or StrategicProfile for the capacity, but not RepresentativeProfile or OperationalProfile. In addition, all values have to be non-negative.\ntrans_loss::TimeProfile:\nThe transmission loss is calculated as a ratio of the transported resource. It is an absolute ratio, i.e., it is not dependent on the distance of the transmission corridor.\nopex_var::TimeProfile:\nThe variable operational expenses are based on the capacity utilization through the variable :trans_out. Hence, it is directly related to the specified output ratios. The variable operating expenses can be provided as OperationalProfile as well.\nopex_fixed::TimeProfile:\nThe fixed operating expenses are relative to the installed capacity (through the field trans_cap) and the chosen duration of a strategic period as outlined on Utilize TimeStruct.\nIt is important to note that you can only use FixedProfile or StrategicProfile for the fixed OPEX, but not RepresentativeProfile or OperationalProfile. In addition, all values have to be non-negative.\ndata::Vector{Data}:\nAn entry for providing additional data to the model. In the current version, it is only used for providing additional investment data when EnergyModelsInvestments is used.\nnote: Note\nThe field data is not required as we include a constructor when the value is excluded.","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"PipeLinepackSimple transmission modes also introduce an additional field:","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"energy_share:Float64:\nThe energy share is a value corresponding to the amount of a resource that can be stored within a PipeLinepackSimple transmission mode. It is a relative ratio corresponding to the maximum amount of a Resource that can be stored within a pipeline. If you have, e.g., a hydrogen pipeline of 13 GW and have the potential to store in this pipeline 13 GWh through linepacking, then you have to provide a value of 1 GWh/GW.","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"The types RefStatic and RefDynamic have furthermore the following field:","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"directions::Int:\nThe direction value decides whether only unidirectional (1) or bidirectional (2) transport is allowed for the transmission mode.","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"Theoretically, both PipeSimple and PipeLinepackSimple include the field directions. However, it is automatically set to 1 through the application of an inner constructor.","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"tip: Order of the fields\nThe order of the individual fields can be best found in the library, RefStatic, RefDynamic, PipeSimple, and PipeLinepackSimple.","category":"page"},{"location":"area_mode/mode/#nodes-trans_mode-math","page":"Transmission modes","title":"Mathematical description","text":"","category":"section"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"In the following mathematical equations, we use the name for variables and functions used in the model. Variables are in general represented as","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"textttvar_exampleindex_1 index_2","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"with square brackets, while functions are represented as","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"func_example(index_1 index_2)","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"with paranthesis.","category":"page"},{"location":"area_mode/mode/#nodes-trans_mode-math-var","page":"Transmission modes","title":"Variables","text":"","category":"section"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"The variables of all transmission modes are described on optimization variables and include:","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"texttttrans_opex_var\ntexttttrans_opex_fixed\ntexttttrans_cap\ntexttttrans_in\ntexttttrans_out\ntexttttrans_loss\ntextttemissions_trans if the transmission mode uses dispatch on the function has_emissions.","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"PipeLinepackSimple transmission modes include furthermore:","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"textttlinepack_stor_level","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"Bidirectional transmission modes include furthermore:","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"texttttrans_neg\ntexttttrans_pos","category":"page"},{"location":"area_mode/mode/#nodes-trans_mode-math-con","page":"Transmission modes","title":"Constraints","text":"","category":"section"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"A qualitative overview of the individual constraints can be found on Constraint functions. This section focuses instead on the mathematical description of the individual constraints. It omits the direction inclusion of the vector of transmission modes. Instead, it is implicitly assumed that the constraints are valid forall tm  M for all TransmissionMode types if not stated differently. In addition, all constraints are valid forall t in T (that is in all operational periods) or forall t_inv in T^Inv (that is in all strategic periods).","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"The following standard constraints are implemented for a TransmissionMode node.","category":"page"},{"location":"area_mode/mode/","page":"Transmission modes","title":"Transmission modes","text":"constraints_capacity:\nUnidirectional transport constrains the outlet flow to the provided capacity while simultaneously introduce lower bounds of 0 on both texttttrans_out and texttttrans_in:\ntexttttrans_outtm t leq texttttrans_captm t\nBidirectional transport constrains both the inlet and outlet flow to the provided capacity:\nbeginaligned\ntexttttrans_intm t  geq -texttttrans_captm t \ntexttttrans_outtm t  leq texttttrans_captm t\nendaligned\nPipeLinepackSimple transmission modes employ the same constraints as unidirectional transport, but require further constraints for the loss calculation and the storage balance:\nbeginaligned\ntexttttrans_intm t   leq texttttrans_captm t + texttttrans_losstm t \ntexttttrans_outtm t  leq texttttrans_captm t \ntextttlinepack_stor_leveltm t  leq texttttrans_captm t times energy_share(tm) \nendaligned\nconstraints_capacity_installed:\ntexttttrans_captm t = capacity(tm t)\ntip: Using investments\nThe function constraints_capacity_installed is also used in EnergyModelsInvestments to incorporate the potential for investment. Nodes with investments are then no longer constrained by the parameter capacity.\nconstraints_trans_loss:\nUnidirectional transport calculates the loss as a fraction of the inlet:\ntexttttrans_losstm t = loss(tm t) times texttttrans_intm t\nBidirectional transport calculates the loss as a fraction of the positive and negative contributions:\ntexttttrans_losstm t = loss(tm t) times left(texttttrans_postm t + texttttrans_negtm tright)\nwhich are in turn calculated as:\ntexttttrans_postm t - texttttrans_negtm t = 05 times\nleft(texttttrans_intm t + texttttrans_outtm tright)\ntodo: Loss calculations\nIt looks to me that the loss calculations are not equivalent. We have to change that.\nconstraints_trans_balance:\nThe overall transport balance is then given as:\ntexttttrans_outtm t = texttttrans_intm t - texttttrans_losstm t\nPipeLinepackSimple uses a different approach which will be revisited as it does not support a time structure including operational scenarios or representative periods. Hence, it will not be included in the documentation. If you are interested in the mathematical formulation, feel free to look at the function constraints_trans_balance.\nconstraints_opex_fixed:\ntexttttrans_opex_fixedtm t_inv = opex_fixed(tm t_inv) times texttttrans_captm first(t_inv)\ntip: Why do we use `first()`\nThe variable texttttrans_cap is declared over all operational periods (see the variable section for further explanations). Hence, we use the function first(t_inv) to retrieve the installed capacity in the first operational period of a given strategic period t_inv in the function constraints_opex_fixed.\nconstraints_opex_var:\nUnidirectional transport calculates the variable operating expenses as a fraction of the outlet flow:\nbeginaligned\ntexttttrans_opex_vartm t_inv = sum_t in t_inv  opex_var(tm t) times  \ntexttttrans_outtm t times  \nscale_op_sp(t_inv t)\nendaligned\nwhile bidirectional transport utilize again the variables texttttrans_postm t and texttttrans_negtm t as introduced above:\nbeginaligned\ntexttttrans_opex_vartm t_inv = sum_t in t_inv  opex_var(tm t) times  \nleft(texttttrans_postm t + texttttrans_negtm tright) times  \nscale_op_sp(t_inv t)\nendaligned\ntip: The function `scale_op_sp`\nThe function scale_op_sp(t_inv t) calculates the scaling factor between operational and strategic periods. It also takes into account potential operational scenarios and their probability as well as representative periods.\nconstraints_emissions:\nUnidirectional transport calculates the emissions of the resourecs p_em in emit_resources(tm) as a fraction of the outlet flow:\ntextttemissions_transtm t p_em = emission(tm p_em t) times texttttrans_outtm t\nwhile bidirectional transport utilize again the variables texttttrans_postm t and texttttrans_negtm t as introduced above:\ntextttemissions_transtm t p_em = emission(tm p_em t) times left(texttttrans_postm t + texttttrans_negtm tright)","category":"page"},{"location":"library/public/area/#lib-pub-area","page":"Areas","title":"Area","text":"","category":"section"},{"location":"library/public/area/","page":"Areas","title":"Areas","text":"A geographical Area consist of a location and a connection to a local energy system via a specialized Availability node called GeoAvailability. The specialized Availability node is required to modify the energy/mass balance to allow for imports and exports. Constraints related to the area keep track of a resource's export and import to the local system and exchange with other areas. Multiple dispatch is used on the Area type for imposing specific constraints. Hence, other restrictions can be applied on a area level, such as electricity generation reserves, CO₂ emission limits or resource limits (wind power, natural gas etc.).","category":"page"},{"location":"library/public/area/#lib-pub-area-types","page":"Areas","title":"Area types","text":"","category":"section"},{"location":"library/public/area/","page":"Areas","title":"Areas","text":"The following types are inmplemented:","category":"page"},{"location":"library/public/area/","page":"Areas","title":"Areas","text":"Area\nRefArea\nLimitedExchangeArea\nGeoAvailability","category":"page"},{"location":"library/public/area/#EnergyModelsGeography.Area","page":"Areas","title":"EnergyModelsGeography.Area","text":"Declaration of the general type for areas.\n\n\n\n\n\n","category":"type"},{"location":"library/public/area/#EnergyModelsGeography.RefArea","page":"Areas","title":"EnergyModelsGeography.RefArea","text":"RefArea <: Area\n\nA RefArea is an area representation with no additional constraints on energy/mass exchange.\n\nFields\n\nid is the name/identifier of the area.\nname is the name of the area.\nlon::Real is the longitudinal position of the area.\nlat::Real is the latitudinal position of the area.\nnode::Availability is the Availability node routing different resources within an area.\n\n\n\n\n\n","category":"type"},{"location":"library/public/area/#EnergyModelsGeography.LimitedExchangeArea","page":"Areas","title":"EnergyModelsGeography.LimitedExchangeArea","text":"LimitedExchangeArea <: Area\n\nA LimitedExchangeArea is an area in which the export is limited in each individual operational period for the provided resources. This can be necessary when an area is coupled with multiple other areas and the total export capacity should be restricted.\n\nFields\n\nid is the name/identifier of the area.\nname is the name of the area.\nlon::Real is the longitudinal position of the area.\nlat::Real is the latitudinal position of the area.\nnode::Availability is the Availability node routing different resources within an area.\nlimit::Dict{<:EMB.Resource, <:TimeProfile} is the amount of a resource that can be exchanged with other areas.\n\n\n\n\n\n","category":"type"},{"location":"library/public/area/#EnergyModelsGeography.GeoAvailability","page":"Areas","title":"EnergyModelsGeography.GeoAvailability","text":"GeoAvailability <: EMB.Availability\n\nA geography Availability node for substituion of the general GenAvailability node. A GeoAvailability is required if transmission should be included between individual [Area](@refs due to a changed mass balance.\n\nFields\n\nid is the name/identifier of the node.\ninputs::Vector{<:Resource} are the input Resources.\noutput::Vector{<:Resource} are the output Resources.\n\n\n\n\n\n","category":"type"},{"location":"library/public/area/#lib-pub-area-fun_field","page":"Areas","title":"Functions for accessing fields of Area types","text":"","category":"section"},{"location":"library/public/area/","page":"Areas","title":"Areas","text":"The following functions are defined for accessing fields from an Area:","category":"page"},{"location":"library/public/area/","page":"Areas","title":"Areas","text":"name\navailability_node\nlimit_resources\nexchange_limit\nexchange_resources","category":"page"},{"location":"library/public/area/#EnergyModelsGeography.name","page":"Areas","title":"EnergyModelsGeography.name","text":"name(a::Area)\n\nReturns the name of area a.\n\n\n\n\n\n","category":"function"},{"location":"library/public/area/#EnergyModelsGeography.availability_node","page":"Areas","title":"EnergyModelsGeography.availability_node","text":"availability_node(a::Area)\n\nReturns the availability node of an Area a.\n\n\n\n\n\n","category":"function"},{"location":"library/public/area/#EnergyModelsGeography.limit_resources","page":"Areas","title":"EnergyModelsGeography.limit_resources","text":"limit_resources(a::LimitedExchangeArea)\n\nReturns the limited resources of a LimitedExchangeArea a. All other resources are considered unlimited.\n\n\n\n\n\n","category":"function"},{"location":"library/public/area/#EnergyModelsGeography.exchange_limit","page":"Areas","title":"EnergyModelsGeography.exchange_limit","text":"exchange_limit(a::LimitedExchangeArea)\nexchange_limit(a::LimitedExchangeArea, p::Resource)\nexchange_limit(a::LimitedExchangeArea, p::Resource, t)\n\nReturns the limits of the exchange resources in area a as dictionary, the value of resource p as TimeProfile, or the value of resource p in operational period t.\n\nIf the resource p is not included, the function returns either a FixedProfile(0) or a value of 0.\n\n\n\n\n\n","category":"function"},{"location":"library/public/area/#EnergyModelsGeography.exchange_resources","page":"Areas","title":"EnergyModelsGeography.exchange_resources","text":"exchange_resources(ℒᵗʳᵃⁿˢ, a::Area)\n\nReturn the resources exchanged (import and export) from area a on the transmission corridors in ℒᵗʳᵃⁿˢ.\n\n\n\n\n\n","category":"function"},{"location":"library/public/area/#lib-pub-area-fun_util","page":"Areas","title":"Utility functions for Area types","text":"","category":"section"},{"location":"library/public/area/","page":"Areas","title":"Areas","text":"getnodesinarea\nnodes_in_area","category":"page"},{"location":"library/public/area/#EnergyModelsGeography.getnodesinarea","page":"Areas","title":"EnergyModelsGeography.getnodesinarea","text":"getnodesinarea(a::Area, links)\n\nReturn a vector with all the nodes connected to the central availability node of an area.\n\nArguments\n\na::Area. \nlinks is a vector of all links in the model.\n\n\n\n\n\n","category":"function"},{"location":"library/public/area/#EnergyModelsGeography.nodes_in_area","page":"Areas","title":"EnergyModelsGeography.nodes_in_area","text":"nodes_in_area(a::Area, ℒ::Vector{<:Link}; n_nodes=1000)\n\nReturns a vector of all nodes in area a connected through links ℒ. The approach is based on a breadth-first-search and provides all connected nodes, contrary to the function getnodesinarea.\n\nArguments\n\na::Area is area that should be evaluated\nℒ::Vector{<:Link} is a vector of links that should be evaluated.\n\nKeyword arguments\n\nn_nodes=1000 the number of nodes added after which the loop is broken. It must be at least equal to the number of nodes in the area a.\n\n\n\n\n\n","category":"function"},{"location":"manual/NEWS/#Release-notes","page":"Release notes","title":"Release notes","text":"","category":"section"},{"location":"manual/NEWS/#Unversioned","page":"Release notes","title":"Unversioned","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Included a new method for identifying nodes within an area using breadth-first search. This method allows for an arbitrary connection of links between a node and the availability node.\nMinor typo updates in the documentation.","category":"page"},{"location":"manual/NEWS/#Version-0.10.1-(2024-10-16)","page":"Release notes","title":"Version 0.10.1 (2024-10-16)","text":"","category":"section"},{"location":"manual/NEWS/#Minor-updates","page":"Release notes","title":"Minor updates","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Reworked the tests and included the tests for investments.\nIncluded an option to deactive the checks entirely with printing a warning, similarly to EnergyModelsBase.\nAdjusted to EnergyModelsBase v0.8.1 and EnergyModelsInvestments v0.8.0.","category":"page"},{"location":"manual/NEWS/#Rework-of-documentation","page":"Release notes","title":"Rework of documentation","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"The documentation received a significant rework. The rework consists of:\nProvide webpages for the descriptions of Areas, Transmission, and TransmissionMode in which the fields are described more in detail as well as a description of the math.\nRestructured both the public and internal libraries","category":"page"},{"location":"manual/NEWS/#Version-0.10.0-(2024-08-21)","page":"Release notes","title":"Version 0.10.0 (2024-08-21)","text":"","category":"section"},{"location":"manual/NEWS/#Changed-PipeSimple-and-PipeLinepackSimple-types","page":"Release notes","title":"Changed PipeSimple and PipeLinepackSimple types","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Moved away from @kwdef to avoid having to specify potentially all field names.\nIncluded an inner constructor for limiting the field directions to 1 to avoid issues in the calculations.","category":"page"},{"location":"manual/NEWS/#Introduced-EnergyModelsInvestments-as-extension","page":"Release notes","title":"Introduced EnergyModelsInvestments as extension","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"EnergyModelsInvestments was switched to be an independent package in PR #28.\nThis approach required EnergyModelsGeography to include all functions and type declarations internally.\nAn extension was introduced to handle these problems.","category":"page"},{"location":"manual/NEWS/#Introduced-potential-for-emissions-of-TransmissionModes","page":"Release notes","title":"Introduced potential for emissions of TransmissionModes","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"As outlined in Issue 9, there is a requirement for potential emissions from TransmissionModes.\nThe clean approach was not achieved within a certain timeframe, hence, a limited approach is implemented based on the initial provided branches in both EMB and EMG.\nThe implementation is not tested!","category":"page"},{"location":"manual/NEWS/#Version-0.9.1-(2024-08-19)","page":"Release notes","title":"Version 0.9.1 (2024-08-19)","text":"","category":"section"},{"location":"manual/NEWS/#Bugfix","page":"Release notes","title":"Bugfix","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"The variable OPEX for unidirectional transmission modes was wrongly calculated as it did not take into account the scaling provided through the optional keyword argument op_per_strat of TimeStruct.","category":"page"},{"location":"manual/NEWS/#Other","page":"Release notes","title":"Other","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Use dev version of EMG for examples when running as part of tests, similar to PR #33 of EMB.","category":"page"},{"location":"manual/NEWS/#Version-0.9.0-(2024-05-24)","page":"Release notes","title":"Version 0.9.0 (2024-05-24)","text":"","category":"section"},{"location":"manual/NEWS/#Update-on-function-calls-for-dispatching-on-modeltype","page":"Release notes","title":"Update on function calls for dispatching on modeltype","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Introduced modeltype as argument for all create and constraint functions.\nMoved constraint on installed capacity to function constraints_capacity_installed to replicate the dispatch behaviour from EnergyModelsBase.","category":"page"},{"location":"manual/NEWS/#Version-0.8.5-(2024-05-24)","page":"Release notes","title":"Version 0.8.5 (2024-05-24)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Update of dependencies and adjustment to changes in EnergyModelsBase v0.7.","category":"page"},{"location":"manual/NEWS/#Version-0.8.4-(2024-05-09)","page":"Release notes","title":"Version 0.8.4 (2024-05-09)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Provided a contribution section in the documentation.\nFixed a link in the documentation for the examples.","category":"page"},{"location":"manual/NEWS/#Version-0.8.3-(2024-03-21)","page":"Release notes","title":"Version 0.8.3 (2024-03-21)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fixed a bug regarding accessing the field limit of a LimitedExchangeArea.\nMoved all files declaring structures to a separate folder for improved readability.\nAllow for jumping over TimeProfile checks also from EnergyModelsGeography.\nAdded possibility to provide a different type of JuMP.Model.","category":"page"},{"location":"manual/NEWS/#Version-0.8.2-(2024-03-04)","page":"Release notes","title":"Version 0.8.2 (2024-03-04)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fixed a bug when running the examples from a non-cloned version of EnergyModelsGeography.\nThis was achieved through a separate Project.toml in the examples.","category":"page"},{"location":"manual/NEWS/#Version-0.8.1-(2024-01-30)","page":"Release notes","title":"Version 0.8.1 (2024-01-30)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Updated the restrictions on the fields of individual types to be more restrictive.","category":"page"},{"location":"manual/NEWS/#Version-0.8.0-(2023-12-19)","page":"Release notes","title":"Version 0.8.0 (2023-12-19)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjusted to changes in EnergyModelsBase v0.6. These changes are mainly:","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"All fields of composite types are now lower case.\nAn extensive number of functions to access the individual fields were included, allowing for differing definitions of the individual nodes.\nThe GeoAvailability type does no longer require as input dictionaries for both input and output. Instead, it is now a single array corresponding to all resources.\nNew function getnodesinarea to extract nodes connected to the Availability node of an area.\nChanged file structure for simplified understanding of the different types.","category":"page"},{"location":"manual/NEWS/#Version-0.7.1-(2023-06-16)","page":"Release notes","title":"Version 0.7.1 (2023-06-16)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Updated the documentation based on the new format.","category":"page"},{"location":"manual/NEWS/#Version-0.7.0-(2023-06-06)","page":"Release notes","title":"Version 0.7.0 (2023-06-06)","text":"","category":"section"},{"location":"manual/NEWS/#Switch-to-TimeStruct","page":"Release notes","title":"Switch to TimeStruct","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Switched the time structure representation to TimeStruct.\nTimeStruct is implemented with only the basis features that were available in TimeStructures. This implies that neither operational nor strategic uncertainty is included in the model.","category":"page"},{"location":"manual/NEWS/#Version-0.6.1-(2023-06-02)","page":"Release notes","title":"Version 0.6.1 (2023-06-02)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Bugfix in linepacking to include multiplication with duration(t) for proper energy accounting","category":"page"},{"location":"manual/NEWS/#Version-0.6.0-(2023-05-30)","page":"Release notes","title":"Version 0.6.0 (2023-05-30)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Changed the structure in which the extra field Data is included in the nodes.\nIt is changed from Dict{String, Data} to Array{data}.","category":"page"},{"location":"manual/NEWS/#Version-0.5.2-(2023-05-16)","page":"Release notes","title":"Version 0.5.2 (2023-05-16)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Bugfix in the example which lead to a trivial solution in which no energy has to be converted.","category":"page"},{"location":"manual/NEWS/#Version-0.5.1-(2023-04-30)","page":"Release notes","title":"Version 0.5.1 (2023-04-30)","text":"","category":"section"},{"location":"manual/NEWS/#Multiple-smaller-updates","page":"Release notes","title":"Multiple smaller updates","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Moved the example in user_interface.jl into an example folder.\nIntroduced checks that can be utlized to check transmission related data.\nFixed a bug for LimitedExchangeArea that utilized wrong values.","category":"page"},{"location":"manual/NEWS/#Version-0.5.0-(2023-04-27)","page":"Release notes","title":"Version 0.5.0 (2023-04-27)","text":"","category":"section"},{"location":"manual/NEWS/#Added-var-and-fixed-opex-for-transmision-modes","page":"Release notes","title":"Added var and fixed opex for transmision modes","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"All TransmissionMode are updated to have fields for var and fixed opex.\nVariables trans_opex_var and trans_opex_fixed, also constraints that describes these variables.\nThe function update_objective is updated in src\\model.jl to add var and fixed opex to the objective function.","category":"page"},{"location":"manual/NEWS/#Additional-changes","page":"Release notes","title":"Additional changes","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Constraints formulations are seperated into functions and moved to src\\constraint_functions.jl, similar to how is is organized in EnergyModelsBase commit [26ad8740].\nCompute functions are moved to seperate file src\\compute_functions.jl.","category":"page"},{"location":"manual/NEWS/#Version-0.4.0-(2023-03-17)","page":"Release notes","title":"Version 0.4.0 (2023-03-17)","text":"","category":"section"},{"location":"manual/NEWS/#Change-of-indexing","page":"Release notes","title":"Change of indexing","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Variables are now indexed via the TransmissionMode and the time period instead of the using a SparseAxisArray and indexing via Transmission, time period, and TransmissionMode. This also improves model generation time.\nThis adjustment requires the declaration of a new instance for each usage of a TransmissionMode, see, e.g., the changes in scr\\user_interface.jl.","category":"page"},{"location":"manual/NEWS/#Additional-changes-2","page":"Release notes","title":"Additional changes","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Change of variable generation for individual transmission modes: Variable generation via the function variables_trans_mode(s) is adjusted to follow the concept introduced in EnergyModelsBase.\nMove of the field Data from Transmission to TransmissionMode. This is required for the later application of dispatching in EnergyModelsInvestments.","category":"page"},{"location":"manual/NEWS/#Version-0.3.1-(2023-02-16)","page":"Release notes","title":"Version 0.3.1 (2023-02-16)","text":"","category":"section"},{"location":"manual/NEWS/#Introduction-of-linepacking","page":"Release notes","title":"Introduction of linepacking","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Redefinition of PipelineMode as abstract type PipeMode and introduction of PipeSimple as a composite type corresponding to the previous PipelineMode.\nIntroduction of a simple linepacking implementation via the type `PipeLinepackSimple.\nChange of Area to abstract type to be able to dispatch on areas.\nRewriting how functions for variable generation are called for easier introduction of variables for different TransmissionModes.","category":"page"},{"location":"manual/NEWS/#Version-0.3.0-(2023-02-02)","page":"Release notes","title":"Version 0.3.0 (2023-02-02)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustmends-to-updates-in-EnergyModelsBase","page":"Release notes","title":"Adjustmends to updates in EnergyModelsBase","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustment to version 0.3.0, namely:","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"The removal of emissions from Node type definition that do not require them in all tests.\nRemoval of the type GlobalData and replacement with fields in the type OperationalModel in all tests.","category":"page"},{"location":"manual/NEWS/#Version-0.2.2-(2022-12-12)","page":"Release notes","title":"Version 0.2.2 (2022-12-12)","text":"","category":"section"},{"location":"manual/NEWS/#Internal-release","page":"Release notes","title":"Internal release","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Updated Readme.\nRenamed with common prefix.","category":"page"},{"location":"manual/NEWS/#Version-0.2.1-(2021-09-07)","page":"Release notes","title":"Version 0.2.1 (2021-09-07)","text":"","category":"section"},{"location":"manual/NEWS/#Changes-in-naming","page":"Release notes","title":"Changes in naming","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Major changes in both variable and parameter naming, check the commit message for an overview.\nIntroduction of bidrectional flow in transmission lines.","category":"page"},{"location":"manual/NEWS/#Version-0.2.0-(2021-08-02)","page":"Release notes","title":"Version 0.2.0 (2021-08-02)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Defined structures for Areas, Transmission corridors and TransmissionModes.\nOverloading of the default availability node balance to allow for export and import.\nAdded examples of plotting in maps.","category":"page"},{"location":"manual/NEWS/#Version-0.1.0-(2021-04-19)","page":"Release notes","title":"Version 0.1.0 (2021-04-19)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Initial (skeleton) version.","category":"page"},{"location":"#EnergyModelsGeography","page":"Home","title":"EnergyModelsGeography","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"EnergyModelsGeography","category":"page"},{"location":"#EnergyModelsGeography","page":"Home","title":"EnergyModelsGeography","text":"Main module for EnergyModelsGeography.jl.\n\nExports:\n\nArea, RefArea, GeoAvailability, Transmission, RefStatic, RefDynamic, PipeMode, PipeSimple, PipeLinepackSimple.\n\n\n\n\n\n","category":"module"},{"location":"","page":"Home","title":"Home","text":"The Julia package extends EnergyModelsBase with functionality to set up an energy system consisting of several separate regions, with transmissions between.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The extension focuses on overriding the function EMB.create_model to add additional types, variables, and constraints to the model.","category":"page"},{"location":"#Manual-outline","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"manual/quick-start.md\",\n    \"manual/philosophy.md\",\n    \"manual/optimization-variables.md\",\n    \"manual/constraint-functions.md\",\n    \"manual/investments.md\",\n    \"manual/simple-example.md\"\n]\nDepth = 1","category":"page"},{"location":"#Description-of-the-areas-and-transmission-modes","page":"Home","title":"Description of the areas and transmission modes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"area-mode/area.md\",\n    \"area-mode/corridor.md\",\n    \"area-mode/mode.md\",\n]\nDepth = 1","category":"page"},{"location":"#How-to-guides","page":"Home","title":"How to guides","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"how-to/update-models.md\",\n    \"how-to/contribute.md\",\n]\nDepth = 1","category":"page"},{"location":"#Library-outline","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"#Public-library","page":"Home","title":"Public library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"library/public/area.md\",\n    \"library/public/transmission.md\",\n    \"library/public/mode.md\",\n    \"library/public/emi_extension.md\",\n    ]\nDepth = 1","category":"page"},{"location":"#Internal-library","page":"Home","title":"Internal library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"library/internals/functions.md\",\n    \"library/internals/methods_EMB.md\",\n    \"library/internals/methods_EMIExt.md\",\n    ]\nDepth = 1","category":"page"},{"location":"library/internals/methods_EMB/#lib-int-met_emb","page":"Methods EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"","category":"section"},{"location":"library/internals/methods_EMB/#lib-int-met_emb-idx","page":"Methods EnergyModelsBase","title":"Index","text":"","category":"section"},{"location":"library/internals/methods_EMB/","page":"Methods EnergyModelsBase","title":"Methods EnergyModelsBase","text":"Pages = [\"methods_EMB.md\"]","category":"page"},{"location":"library/internals/methods_EMB/#lib-int-met_emb-ext","page":"Methods EnergyModelsBase","title":"Extension methods","text":"","category":"section"},{"location":"library/internals/methods_EMB/","page":"Methods EnergyModelsBase","title":"Methods EnergyModelsBase","text":"EnergyModelsBase.create_node","category":"page"},{"location":"library/internals/methods_EMB/#EnergyModelsBase.create_node","page":"Methods EnergyModelsBase","title":"EnergyModelsBase.create_node","text":"EMB.create_node(m, n::GeoAvailability, 𝒯, 𝒫, modeltype::EnergyModel)\n\nSet all constraints for a GeoAvailability. The energy balance is handlded in the function constraints_area. Hence, no constraints are added\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods_EMB/#lib-int-met_emb-field","page":"Methods EnergyModelsBase","title":"Field extraction methods","text":"","category":"section"},{"location":"library/internals/methods_EMB/","page":"Methods EnergyModelsBase","title":"Methods EnergyModelsBase","text":"EnergyModelsBase.capacity\nEnergyModelsBase.inputs\nEnergyModelsBase.outputs\nEnergyModelsBase.opex_fixed\nEnergyModelsBase.opex_var","category":"page"},{"location":"library/internals/methods_EMB/#EnergyModelsBase.capacity","page":"Methods EnergyModelsBase","title":"EnergyModelsBase.capacity","text":"capacity(tm::TransmissionMode)\ncapacity(tm::TransmissionMode, t)\n\nReturns the capacity of transmission mode tm as TimeProfile or in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods_EMB/#EnergyModelsBase.inputs","page":"Methods EnergyModelsBase","title":"EnergyModelsBase.inputs","text":"inputs(tm::TransmissionMode)\ninputs(tm::PipeMode)\n\nReturns the input resources of transmission mode tm.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods_EMB/#EnergyModelsBase.outputs","page":"Methods EnergyModelsBase","title":"EnergyModelsBase.outputs","text":"outputs(tm::TransmissionMode)\noutputs(tm::PipeMode)\n\nReturns the output resources of transmission mode tm.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods_EMB/#EnergyModelsBase.opex_fixed","page":"Methods EnergyModelsBase","title":"EnergyModelsBase.opex_fixed","text":"opex_fixed(tm::TransmissionMode)\nopex_fixed(tm::TransmissionMode, t_inv)\n\nReturns the variable OPEX of transmission mode tm as TimeProfile or in strategic period t_inv.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods_EMB/#EnergyModelsBase.opex_var","page":"Methods EnergyModelsBase","title":"EnergyModelsBase.opex_var","text":"opex_var(tm::TransmissionMode)\nopex_var(tm::TransmissionMode, t)\n\nReturns the variable OPEX of transmission mode tm as TimeProfile or in operational period t.\n\n\n\n\n\n","category":"function"}]
}
